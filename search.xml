<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.27JAVA学习日志</title>
    <url>/2022/01/28/1-27JAVA%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>#1.27JAVA学习日志</p>
<hr>
<pre><code>1. Java中没有无符号整数存储方式
2. 算数移位 “&gt;&gt; &lt;&lt;”  / 逻辑移位（带符号位）“&gt;&gt;&gt; &lt;&lt;&lt;”
3. vscode 中的配置设置快捷键 ctrl + ,
4. jdk查看版本 /usr/libexec/java_home -V
5. 整数与浮点数计算时 整数自动转换为浮点数
6. 整数运算在除数为0时会报错，而浮点数运算在除数为0时，不会报     错，但会返回几个特殊值：
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">NaN表示Not a Number</span><br><span class="line"></span><br><span class="line">Infinity表示无穷大</span><br><span class="line">-Infinity表示负无穷大</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>7. String[] args 表示的是调用main()时候的传递的字符串参数 可以使用args[x]调用   
8. 一个java程序必须有且仅有一个main方法
9. java文件在编写时带上package包一行 在terminal之中直接编译 将无法找到主类，可以的选择A：注释掉packag行 B：运行是返回到java类的包的上一级目录之中
10. java是大小写敏感的    类名应该使用首字母大写开头（每个单词的首字母都需要大写） 方法吗名：首字母必须小写字母开头
11. java的枚举。enum 只能是事先设置好的
12. java中的注释： //(单行）。  /*（多行注释）*/
</code></pre>
<hr>
]]></content>
      <categories>
        <category>JAVA学习</category>
      </categories>
      <tags>
        <tag>java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>1.29JAVA学习日志</title>
    <url>/2022/02/02/1-29JAVA%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="1-29学习日志"><a href="#1-29学习日志" class="headerlink" title="1.29学习日志"></a>1.29学习日志</h2><h2 id="Hexo博客在写Hexo-Deploy之后GitHub界面没有更新"><a href="#Hexo博客在写Hexo-Deploy之后GitHub界面没有更新" class="headerlink" title="Hexo博客在写Hexo Deploy之后GitHub界面没有更新"></a>Hexo博客在写Hexo Deploy之后GitHub界面没有更新</h2><h3 id="1-通过"><a href="#1-通过" class="headerlink" title="1. 通过"></a>1. 通过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过 hexo clean清理hexo的缓存</span><br><span class="line">通过 hexo g</span><br><span class="line">Hexo d 之后同步</span><br></pre></td></tr></table></figure>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol>
<li>Hexo clean清理缓存</li>
<li>ctrl + F5浏览器缓存清理</li>
</ol>
<hr>
<p>Java中默认的整数类型是int，如果要定义为long ，则要在数值后加上L或者l</p>
<p>默认的浮点型是双精度浮点，如果要定义float，则要在数值后面加上f或者F</p>
<hr>
<h2 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h2><h3 id="1、类注释"><a href="#1、类注释" class="headerlink" title="1、类注释"></a>1、类注释</h3><p>在每个类前面必须加上类注释，注释模板如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* Copyright (C), 2006-2010, ChengDu Lovo info. Co., Ltd.</span><br><span class="line">* FileName: Test.java</span><br><span class="line">* 类的详细说明</span><br><span class="line">*</span><br><span class="line">* @author 类创建者姓名</span><br><span class="line">* @Date    创建日期</span><br><span class="line">* @version 1.00</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<p>###2、属性注释</p>
<p>在每个属性前面必须加上属性注释，注释模板如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** 提示信息 */</span><br><span class="line">private String strMsg = null;</span><br></pre></td></tr></table></figure>

<h3 id="3、方法注释"><a href="#3、方法注释" class="headerlink" title="3、方法注释"></a>3、方法注释</h3><p>在每个方法前面必须加上方法注释，注释模板如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* 类方法的详细使用说明</span><br><span class="line">*</span><br><span class="line">* @param 参数1 参数1的使用说明</span><br><span class="line">* @return 返回结果的说明</span><br><span class="line">* @throws 异常类型.错误代码 注明从此类方法中抛出异常的说明</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>JAVA学习日志</category>
      </categories>
      <tags>
        <tag>JAVA学习日志</tag>
      </tags>
  </entry>
  <entry>
    <title>2.2.2022JAVA学习日志</title>
    <url>/2022/02/02/2-2-2022JAVA%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<hr>
<h2 id="过年中间空闲了3天-放假-哈哈-现在重新整理学习的节奏激情"><a href="#过年中间空闲了3天-放假-哈哈-现在重新整理学习的节奏激情" class="headerlink" title="过年中间空闲了3天 放假 哈哈 现在重新整理学习的节奏激情"></a>过年中间空闲了3天 放假 哈哈 现在重新整理学习的节奏激情</h2><hr>
<h2 id="2-2-2022-学习日志"><a href="#2-2-2022-学习日志" class="headerlink" title="2.2.2022 学习日志"></a>2.2.2022 学习日志</h2><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>1.JAVA是大小写敏感的</p>
<ol start="2">
<li><p>类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass </p>
</li>
<li><p>方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</p>
</li>
</ol>
<p>4.主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行</p>
<hr>
<p>#访问实例变量和方法</p>
<p> 通过已创建的对象来访问成员变量和成员方法，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 实例化对象 */</span><br><span class="line">Object referenceVariable = new Constructor();</span><br><span class="line">/* 访问类中的变量 */</span><br><span class="line">referenceVariable.variableName; (变量的使用 对象.变量)</span><br><span class="line">/* 访问类中的方法 */</span><br><span class="line">referenceVariable.methodName(); (方法的使用 对象.方法)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="JAVA基本数据类型"><a href="#JAVA基本数据类型" class="headerlink" title="JAVA基本数据类型"></a>JAVA基本数据类型</h1><h2 id="JAVA常量"><a href="#JAVA常量" class="headerlink" title="JAVA常量"></a>JAVA常量</h2><p>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似</p>
<hr>
<h3 id="char-a-‘S’-char-后面赋值要用单引号，因为是字符型数据类型"><a href="#char-a-‘S’-char-后面赋值要用单引号，因为是字符型数据类型" class="headerlink" title="char a = ‘S’; char 后面赋值要用单引号，因为是字符型数据类型"></a>char a = ‘S’; char 后面赋值要用单引号，因为是字符型数据类型</h3><h3 id="String-a-“I-AM-FINE”-String-后面赋值要用双引号，因为是字符串数据类型"><a href="#String-a-“I-AM-FINE”-String-后面赋值要用双引号，因为是字符串数据类型" class="headerlink" title="String a = “I AM FINE”; String 后面赋值要用双引号，因为是字符串数据类型"></a>String a = “I AM FINE”; String 后面赋值要用双引号，因为是字符串数据类型</h3><p>（单字符char 用 ‘’ , 字符串String 用 “”）</p>
<hr>
<h1 id="JAVA变量类型"><a href="#JAVA变量类型" class="headerlink" title="JAVA变量类型"></a>JAVA变量类型</h1><p>Java语言支持的变量类型有：</p>
<pre><code>* 类变量：独立于方法之外的变量，用 static 修饰。
* 实例变量：独立于方法之外的变量，不过没有 static 修饰。
* 局部变量：类的方法中的变量。
</code></pre>
<p>实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Variable&#123;</span><br><span class="line">    static int allClicks=0;    // 类变量</span><br><span class="line"> </span><br><span class="line">    String str=&quot;hello world&quot;;  // 实例变量</span><br><span class="line"> </span><br><span class="line">    public void method()&#123;</span><br><span class="line"> </span><br><span class="line">        int i =0;  // 局部变量 （静态变量）</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>** 局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。 如果变量没有初始化，所以在编译时会出错**</p>
<hr>
<h2 id="Java-中静态变量和实例变量区别"><a href="#Java-中静态变量和实例变量区别" class="headerlink" title="Java 中静态变量和实例变量区别"></a>Java 中静态变量和实例变量区别</h2><pre><code>- 静态变量属于类，该类不生产对象，通过类名就可以调用静态变量。
- 实例变量属于该类的对象，必须产生该类对象，才能调用实例变量。
</code></pre>
<p>在程序运行时的区别：</p>
<pre><code>- 实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。
- 静态变量不属于某个实例对象，而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。 
</code></pre>
<p>总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。</p>
<hr>
<h1 id="JAVA修饰符"><a href="#JAVA修饰符" class="headerlink" title="JAVA修饰符"></a>JAVA修饰符</h1><p>** 访问控制修饰符 **<br>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p>
<pre><code>- default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。

- private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）

- public : 对所有类可见。使用对象：类、接口、变量、方法

- protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。
</code></pre>
<hr>
<h2 id="私有访问修饰符-private"><a href="#私有访问修饰符-private" class="headerlink" title="** 私有访问修饰符-private **"></a>** 私有访问修饰符-private **</h2><p>私有访问修饰符是最严格的访问级别，所以被声明为 private 的方法、变量和构造方法只能被所属类访问， ** 并且类和接口不能声明为 private。 **</p>
<p>声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。</p>
<p>** Private 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。 **</p>
<hr>
<h3 id="JAVA的子类"><a href="#JAVA的子类" class="headerlink" title="JAVA的子类"></a>JAVA的子类</h3><p>子类通过extend来继承父类的方法以及变量   Class son extends father;</p>
<h3 id="JAVA的基类、父类"><a href="#JAVA的基类、父类" class="headerlink" title="JAVA的基类、父类"></a>JAVA的基类、父类</h3><h2 id="访问控制和继承"><a href="#访问控制和继承" class="headerlink" title="访问控制和继承"></a>访问控制和继承</h2><p>请注意以下方法继承的规则：</p>
<pre><code>- 父类中声明为 public 的方法在子类中也必须为 public。

- 父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。

- 父类中声明为 private 的方法，不能够被子类继承。
</code></pre>
<hr>
<h1 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h1><ul>
<li><p>static 修饰符，用来修饰类方法和类变量。</p>
</li>
<li><p>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p>
</li>
<li><p>abstract 修饰符，用来创建抽象类和抽象方法。</p>
</li>
<li><p>synchronized 和 volatile 修饰符，主要用于线程的编程。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JAVA学习日志</category>
      </categories>
      <tags>
        <tag>JAVA学习日志</tag>
      </tags>
  </entry>
  <entry>
    <title>2.4.2022Java学习日志</title>
    <url>/2022/02/04/2-4-2022Java%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="2-4-2022-JAVA学习日志"><a href="#2-4-2022-JAVA学习日志" class="headerlink" title="2.4.2022 JAVA学习日志"></a>2.4.2022 JAVA学习日志</h1><hr>
<p>Markdown表格的书写方式<br>|A｜B｜C｜D|</p>
<hr>
<h2 id="1-Java-增强-for-循环"><a href="#1-Java-增强-for-循环" class="headerlink" title="1. Java 增强 for 循环"></a>1. Java 增强 for 循环</h2><p>Java5 引入了一种主要用于数组的增强型 for 循环。</p>
<p>Java 增强 for 循环语法格式如下:</p>
<pre><code>for(声明语句 : 表达式) &#123; //代码句子 &#125;
</code></pre>
<h3 id="声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。"><a href="#声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。" class="headerlink" title="声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。"></a>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。</h3><p>其作用域限定在循环语句块，其值与此时数组元素的值相等。 </p>
<h3 id="表达式：表达式是要访问的数组名，或者是返回值为数组的方法。"><a href="#表达式：表达式是要访问的数组名，或者是返回值为数组的方法。" class="headerlink" title="表达式：表达式是要访问的数组名，或者是返回值为数组的方法。"></a>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</h3><hr>
<h3 id="JAVA-Number类"><a href="#JAVA-Number类" class="headerlink" title="JAVA Number类"></a>JAVA Number类</h3><h3 id="通常使用内置数据类型，如：byte、int、long、double等"><a href="#通常使用内置数据类型，如：byte、int、long、double等" class="headerlink" title="通常使用内置数据类型，如：byte、int、long、double等"></a>通常使用内置数据类型，如：byte、int、long、double等</h3><p>在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。<br>所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类 Number 的子类。<br><strong>（即java包装类的声明就是Java基本类型的首写字母大写方式)</strong></p>
<hr>
<h3 id="Number-amp-Math-类方法"><a href="#Number-amp-Math-类方法" class="headerlink" title="Number &amp; Math 类方法"></a>Number &amp; Math 类方法</h3><p>下面的表中列出的是 Number &amp; Math 类常用的一些方法：<br>序号方法与描述</p>
<h4 id="1-xxxValue"><a href="#1-xxxValue" class="headerlink" title="1. xxxValue()"></a>1. xxxValue()</h4><p>将 Number 对象转换为xxx数据类型的值并返回。</p>
<h4 id="2-compareTo"><a href="#2-compareTo" class="headerlink" title="2.compareTo()"></a>2.compareTo()</h4><p>将number对象与参数比较。</p>
<h4 id="3-equals"><a href="#3-equals" class="headerlink" title="3.equals()"></a>3.equals()</h4><p>判断number对象是否与参数相等。</p>
<h4 id="4-valueOf"><a href="#4-valueOf" class="headerlink" title="4.valueOf()"></a>4.valueOf()</h4><p>返回一个 Number 对象指定的内置数据类型</p>
<h4 id="5-toString"><a href="#5-toString" class="headerlink" title="5.toString()"></a>5.toString()</h4><p>以字符串形式返回值。</p>
<h4 id="6-parseInt"><a href="#6-parseInt" class="headerlink" title="6.parseInt()"></a>6.parseInt()</h4><p>将字符串解析为int类型。</p>
<h4 id="7-abs"><a href="#7-abs" class="headerlink" title="7.abs()"></a>7.abs()</h4><p>返回参数的绝对值。</p>
<h4 id="8-ceil"><a href="#8-ceil" class="headerlink" title="8.ceil()"></a>8.ceil()</h4><p>返回大于等于( &gt;= )给定参数的的最小整数，类型为双精度浮点型。</p>
<h4 id="9-floor"><a href="#9-floor" class="headerlink" title="9.floor()"></a>9.floor()</h4><p>返回小于等于（&lt;=）给定参数的最大整数 。</p>
<h4 id="10-rint"><a href="#10-rint" class="headerlink" title="10.rint()"></a>10.rint()</h4><p>返回与参数最接近的整数。返回类型为double。</p>
<p>####11.round()<br>它表示四舍五入，算法为 Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。</p>
<hr>
<h3 id="String-类是不可改变的解析"><a href="#String-类是不可改变的解析" class="headerlink" title="String 类是不可改变的解析"></a>String 类是不可改变的解析</h3><p>实例中的 s 只是一个 String 对象的引用，并不是对象本身，当执行 s = “Runoob”; 创建了一个新的对象 “Runoob”，而原来的 “Google” 还存在于内存中。</p>
<h2 id="Java：String、StringBuffer-和-StringBuilder-的区别"><a href="#Java：String、StringBuffer-和-StringBuilder-的区别" class="headerlink" title="Java：String、StringBuffer 和 StringBuilder 的区别"></a><strong>Java：String、StringBuffer 和 StringBuilder 的区别</strong></h2><ul>
<li>String：字符串常量，字符串长度不可变。Java中String是immutable（不可变）的。用于存放字符的数组被声明为final的，因此只能赋值一次，不可再更改。</li>
</ul>
<ul>
<li>StringBuffer：字符串变量（Synchronized，即线程安全）。如果要频繁对字符串内容进行修改，出于效率考虑最好使用 StringBuffer，如果想转成 String 类型，可以调用 StringBuffer 的 toString() 方法。Java.lang.StringBuffer 线程安全的可变字符序列。在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。可将字符串缓冲区安全地用于多个线程。</li>
<li>StringBuilder：字符串变量（非线程安全）。在内部 StringBuilder 对象被当作是一个包含字符序列的变长数组。</li>
</ul>
<p>基本原则：</p>
<pre><code>•    如果要操作少量的数据用 String ；
•    单线程操作大量数据用StringBuilder ；（多数情况下使用的StringBuilder方便String类的操作）
•    多线程操作大量数据，用StringBuffer。(需要线程安全的时候使用)
</code></pre>
<hr>
<h2 id="JAVA数组"><a href="#JAVA数组" class="headerlink" title="JAVA数组"></a>JAVA数组</h2><h4 id="数组的使用："><a href="#数组的使用：" class="headerlink" title="数组的使用："></a>数组的使用：</h4><ol>
<li><p>声明数组变量<br> dataType[] arrayRefVar; // 首选的方法</p>
</li>
<li><p>创建数组<br>Java语言使用new操作符来创建数组，语法如下：<br><code> arrayRefVar = new dataType[arraySize]; </code></p>
</li>
</ol>
<p><strong>数组变量的声明，和创建数组可以用一条语句完成，如下所示：</strong><br><code>dataType[] arrayRefVar = new dataType[arraySize];</code></p>
<p>另外，你还可以使用如下的方式创建数组。<br><code>dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;</code><br>数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。</p>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>2.6.2022Java学习日志</title>
    <url>/2022/02/06/2-6-2022Java%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="2-6-2022-Java学习日志"><a href="#2-6-2022-Java学习日志" class="headerlink" title="2.6.2022      Java学习日志"></a>2.6.2022      Java学习日志</h1><hr>
<h2 id="Java-休眠-sleep"><a href="#Java-休眠-sleep" class="headerlink" title="Java 休眠(sleep)"></a>Java 休眠(sleep)</h2><p>sleep()使当前线程进入停滞状态（阻塞当前线程），让出CPU的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会。<br>代码： <code>Thread.sleep(1000*3)   </code></p>
<hr>
<h2 id="Java-Calendar"><a href="#Java-Calendar" class="headerlink" title="Java Calendar"></a>Java Calendar</h2><ol>
<li><p>创建一个代表系统的当前日期的Calendar对象 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    calender作为一个抽象类，实际使用的时候是子类的对象，不需要 单独的声明</span><br><span class="line"></span><br><span class="line">        Calendar c = Calendar.getInstance(); //</span><br><span class="line">        </span><br><span class="line">2. 创建制定日期的Calendar对象</span><br></pre></td></tr></table></figure>
<p> Calendar c = Calender.getInstance();<br> C.set(year, month, day)</p>
</li>
<li><p>Calendar类对象信息的设置<br>Set设置<br>如：<br><code>Calendar c1 = Calendar.getInstance();</code></p>
</li>
</ol>
<p>调用：<br><code>public final void set(int year,int month,int date)</code><br><code>c1.set(2009, 6, 12);//</code><br>把Calendar对象c1的年月日分别设这为：2009、6、12n</p>
<ol start="4">
<li>public void set(int field,int value)</li>
</ol>
<hr>
<h2 id="GregorianCalendar类"><a href="#GregorianCalendar类" class="headerlink" title="GregorianCalendar类"></a>GregorianCalendar类</h2><p>Calendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。<br>Calendar 的getInstance（）方法返回一个默认用当前的语言环境和时区初始化的GregorianCalendar对象。GregorianCalendar定义了两个字段：AD和BC。这是代表公历定义的两个时代。 </p>
<hr>
<h2 id="程序报错积累："><a href="#程序报错积累：" class="headerlink" title="程序报错积累："></a>程序报错积累：</h2><p>在跟随菜鸟教程gregianCalender练习的过程之中 报错：<code>The method get(int) is undefined for the type GregorianCalendarJava(67108964) </code></p>
<p>一般报错这种类型：，三种情况：</p>
<ol>
<li>倒错包了（一般编译器会提示）</li>
<li> 在项目中导入的Jar包不是当前版本的jar 无法支持当前方法</li>
<li>导入了不同版本的同一个Jar包（重要） </li>
</ol>
<p><strong>在拷贝别人的项目的过程中，需要注意，会继续使用项目中的Jar。本次本人遇到的问题属于第三种错误原因。</strong></p>
<hr>
<h2 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h2><h3 id="Java方法的重载："><a href="#Java方法的重载：" class="headerlink" title="Java方法的重载："></a>Java方法的重载：</h3><p>方法重载：一个类的两个方法拥有相同的名字，但是有不同的参数列表。<br>Java编译器根据方法签名判断哪个方法应该被调用。 </p>
<hr>
<h3 id="Java构造方法"><a href="#Java构造方法" class="headerlink" title="Java构造方法"></a>Java构造方法</h3><p>当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。 </p>
<p>通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。 </p>
<hr>
<h2 id="Java-Scanner类"><a href="#Java-Scanner类" class="headerlink" title="Java Scanner类"></a>Java Scanner类</h2><p>创建Scanner 对象的基本语法：<br><code>Scanner scan = new Scanner(System.in) //(调用system.in是控制台输入调用)</code><br>并通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：</p>
<hr>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客完善</title>
    <url>/2022/02/07/Hexo%E5%8D%9A%E5%AE%A2%E5%AE%8C%E5%96%84/</url>
    <content><![CDATA[<h1 id="Hexo-博客的完善"><a href="#Hexo-博客的完善" class="headerlink" title="Hexo 博客的完善"></a>Hexo 博客的完善</h1><hr>
<h2 id="对于Markdown中的图片上传方法："><a href="#对于Markdown中的图片上传方法：" class="headerlink" title="对于Markdown中的图片上传方法："></a>对于Markdown中的图片上传方法：</h2><p>格式   <code>![图片描述]（图片的地址网络、本地）</code></p>
<ol>
<li>使用本地地址在Markdown日志编辑的过程中静态上传，但是对于电脑经常更换，不稳定的环境 这种方法不是最好的</li>
<li>使用网页中的图片地址 </li>
</ol>
<ol start="3">
<li>自动连接 </li>
</ol>
<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。</p>
<hr>
<h2 id="对于博客中的侧边框中-“分类”-“标签”-“关于”-四个按钮在刚配置Next主题之后，没有系统的配置其中的文件，因此会出现“404”的网页错误（cannot-get-XXX）。"><a href="#对于博客中的侧边框中-“分类”-“标签”-“关于”-四个按钮在刚配置Next主题之后，没有系统的配置其中的文件，因此会出现“404”的网页错误（cannot-get-XXX）。" class="headerlink" title="对于博客中的侧边框中 “分类” “标签” “关于” 四个按钮在刚配置Next主题之后，没有系统的配置其中的文件，因此会出现“404”的网页错误（cannot get XXX）。"></a>对于博客中的侧边框中 “分类” “标签” “关于” 四个按钮在刚配置Next主题之后，没有系统的配置其中的文件，因此会出现“404”的网页错误（cannot get XXX）。</h2><p>原因是没有配置相应的页面 “categories” “tags” “about” </p>
<p>因此解决方法便是在博客配置中增加相应页面</p>
<ul>
<li><p>“分类的处理” :<br><code>Hexo new page categories </code><br>配置其中内容<code>“ type ：”categories”</code></p>
</li>
<li><p>“关于”的处理<br><code>Hexo new page “about”</code><br>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Categories: </span><br><span class="line">	- 日志</span><br><span class="line">	- 二级目录</span><br><span class="line">tags: </span><br><span class="line">	- 关于</span><br></pre></td></tr></table></figure></li>
<li><p>“标签的处理”<br><code>Hexo new page tags</code><br>配置添加： <code> type: “tags”</code></p>
</li>
</ul>
<hr>
<h2 id="Hexo-博客添加搜索功能"><a href="#Hexo-博客添加搜索功能" class="headerlink" title="Hexo 博客添加搜索功能"></a>Hexo 博客添加搜索功能</h2><ol>
<li><p>在博客更目录下，执行命令<br><code> npm install Hexo-generator-searchd —save</code> </p>
</li>
<li><p>修改站点配置文件 在_config.yml中添加（原本没有设置）配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#search</span><br><span class="line">Search:</span><br><span class="line">	path: search.xml</span><br><span class="line">	field: post</span><br><span class="line">	format: html</span><br><span class="line">	limit: 10000</span><br></pre></td></tr></table></figure></li>
<li><p>修改主题配置文件<br>修改themes_config.yml配置文件 用’/’搜索local_search,修改enable为true</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_serach::</span><br><span class="line">	enable: true</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo引入本地图片问题</title>
    <url>/2022/02/26/Hexo%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Hexo博客引用本地图片无法加载"><a href="#Hexo博客引用本地图片无法加载" class="headerlink" title="Hexo博客引用本地图片无法加载"></a>Hexo博客引用本地图片无法加载</h1><p>在使用Hexo时，发现在文章中引用本地图片总是无法正常的显示</p>
<img src="/2022/02/26/Hexo%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/1.png" class title="图片无法正常引用">

<h2 id="解决方案：-插件安装与配置"><a href="#解决方案：-插件安装与配置" class="headerlink" title="解决方案： 插件安装与配置"></a>解决方案： 插件安装与配置</h2><ul>
<li><p>安装图片路径转化插件:<code>**hexo -asset-image**</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br><span class="line">或</span><br><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li>
<li><p>在根目录下配置文件<code>_config.yml</code><br>配置<code>post_asset_folder:false</code>改为<code>true</code> 。这样在建立文件时，Hexo会自动建立一个与文章同名的文件夹，可以把与文章所有相关的资源（图片）放在文件夹中，这样就可以使用<em>相对路径</em>来引用</p>
</li>
<li><p>在插入图片是使用的格式<br> <code>&#123;% asset_img test.jpg This is an test image %&#125;</code><br>其中asset_img是插件调用; “This is a …”这是图片的描述，可以自己修改</p>
</li>
<li><p>不能使用Markdown语法引入<br>  <img src="/2022/02/26/Hexo%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/img.png"></p>
<p>可以查看官方文档 ： <code>https://hexo.io/zh-cn/docs</code></p>
</li>
</ul>
<h2 id="问题推测"><a href="#问题推测" class="headerlink" title="问题推测"></a>问题推测</h2><ol>
<li>本体图片没有上传到GitHub仓中，导致引用无效</li>
</ol>
<img src="/2022/02/26/Hexo%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/2.png" class title="gitHub中未正常上传">

<p>解决方案： 安装插件</p>
<ol start="2">
<li><p>本地上传图片没有放在同名文件夹中。<br> 解决方案： 使用<code>post_asset_folder:false</code>改为<code>true</code>。这样在Hexo new 是会自动创建</p>
</li>
<li><p>图片路径出错</p>
</li>
</ol>
]]></content>
      <categories>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>问题解决</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA修饰符</title>
    <url>/2022/02/04/JAVA%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="JAVA修饰符的总结"><a href="#JAVA修饰符的总结" class="headerlink" title="JAVA修饰符的总结"></a>JAVA修饰符的总结</h1><hr>
<h2 id="JAVA-的类（外部类）有-2-种访问权限-public、default-而方法和变量有-4-种：public、default、protected、private。其中默认访问权限和-protected-很相似，有着细微的差别。"><a href="#JAVA-的类（外部类）有-2-种访问权限-public、default-而方法和变量有-4-种：public、default、protected、private。其中默认访问权限和-protected-很相似，有着细微的差别。" class="headerlink" title="JAVA 的类（外部类）有 2 种访问权限: public、default,而方法和变量有 4 种：public、default、protected、private。其中默认访问权限和 protected 很相似，有着细微的差别。"></a>JAVA 的类（外部类）有 2 种访问权限: public、default,而方法和变量有 4 种：public、default、protected、private。其中默认访问权限和 protected 很相似，有着细微的差别。</h2><pre><code>•    public 意味着任何地方的其他类都能访问。
•    default 则是同一个包的类可以访问。
•    protected 表示同一个包的类可以访问，其他的包的该类的子类也可以访问。
•    private 表示只有自己类能访问。
</code></pre>
<h3 id="修饰符：abstract、static、final"><a href="#修饰符：abstract、static、final" class="headerlink" title="修饰符：abstract、static、final"></a>修饰符：abstract、static、final</h3><pre><code>•    abstract: 表示是抽象类。 使用对象：类、接口、方法
•    static: 可以当做普通类使用，而不用先实例化一个外部类。（用他修饰后，就成了静态内部类了）。 使用对象：类、变量、方法、初始化函数（注意：修饰类时只能修饰 内部类 ）
•    final: 表示类不可以被继承。 使用对象：类、变量、方法
</code></pre>
<hr>
<h2 id="非访问权限修控制修饰符："><a href="#非访问权限修控制修饰符：" class="headerlink" title="非访问权限修控制修饰符："></a>非访问权限修控制修饰符：</h2><h3 id="final"><a href="#final" class="headerlink" title="final:"></a>final:</h3><ul>
<li>修饰在类上：类不能被继承；</li>
<li>修饰在方法上：方法继承下来不能被重写；</li>
<li>修饰在属性上：属性只能被赋值一次，没有给默认值，必须在构造方法中赋值。</li>
</ul>
<h3 id="static"><a href="#static" class="headerlink" title="static:"></a>static:</h3><p>修饰在成员变量和方法上，被其修饰的方法和变量从属于类优先加载在方法区，使其能被在堆内存中未加载的对象进行共享访问，static 不能修饰在局部语句块中的变量，因为无法共享该数据，被static修饰的方法不能在该方法里访问该类的对象属性和方法，因为当初始化static修饰的方法和成员变量语句块时，对象还未加载在堆内存，就还没有this对象的引用，就无法访问对象的方法和属性。如需访问必须先把对象new出来。</p>
<h3 id="abstract-类似于类模版"><a href="#abstract-类似于类模版" class="headerlink" title="abstract:(类似于类模版)"></a>abstract:(类似于类模版)</h3><p>abstract修饰类与方法上，修饰在类上就是是抽象类，抽象类中的方法可以被abstract修饰不写花括号以分号结尾，就是抽象方法；</p>
<h3 id="synchronize："><a href="#synchronize：" class="headerlink" title="synchronize："></a>synchronize：</h3><p>synchronize关键字修饰在方法上，在多线程中使用，该方法同一时间只能被一个线程访问，锁就是this</p>
<h3 id="transient"><a href="#transient" class="headerlink" title="transient:"></a>transient:</h3><p>修饰在包含定义变量的语句中将不会被序列化存储在硬盘</p>
<h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>修饰在成员变量上，在多线程中访问该变量，都会重新从线程中获取，使真实数据可见。</p>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA运算符</title>
    <url>/2022/02/04/JAVA%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="JAVA运算符"><a href="#JAVA运算符" class="headerlink" title="JAVA运算符"></a>JAVA运算符</h1><hr>
<p>| 操作符 | 描述 | 例子 |</p>
<p>| ＆（与）| 如果相对应位都是1，则结果为1，否则为0 |A＆B）得到12，即0000 1100 |</p>
<p>|（或）| 如果相对应位都是 0，则结果为 0，否则为 1 |（A | B）得到61，即 0011 1101 |</p>
<p>| ^（非） |    如果相对应位值相同，则结果为0，否则为1 | （A ^ B）得到49，即 0011 0001 |</p>
<p>| 〜（取反) | 按位取反运算符翻转操作数的每一位，即0变成1，1变成0。 | （〜A）得到-61，即1100 0011 |</p>
<p>| &lt;&lt; | 按位左移运算符。左操作数按位左移右操作数指定的位数。|     A &lt;&lt; 2得到240，即 1111 0000 |</p>
<p>| &gt;&gt; |    按位右移运算符。左操作数按位右移右操作数指定的位数。 | A &gt;&gt; 2得到15即 1111 |</p>
<p>| &gt;&gt;&gt; | 按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。 |     A&gt;&gt;&gt;2得到15即0000 1111 |</p>
<hr>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假<br>| 操作符  |    描述 | 例子 |<br>|&amp;&amp; | 称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。| </p>
<p>|（A &amp;&amp; B）为假。 | 称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。     |</p>
<p>| （A | | B）为真。 |</p>
<p>| ！ | 称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。 |</p>
<h2 id="条件运算符（-）"><a href="#条件运算符（-）" class="headerlink" title="条件运算符（?:）"></a>条件运算符（?:）</h2><p>** 条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。 **</p>
<p>variable x = (expression) ? value if true : value if false</p>
<hr>
<h2 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h2><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p>
<p>instanceof运算符使用格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">( Object reference variable ) instanceof  (class/interface type)</span><br></pre></td></tr></table></figure>

<p>子类是父类的类型，但父类不是子类的类型。</p>
<p>子类的实例可以声明为父类型，但父类的实例不能声明为子类型。</p>
<hr>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java HashSet|HashMap</title>
    <url>/2022/02/15/Java-HashSet-HashMap/</url>
    <content><![CDATA[<h1 id="Java-HashSet"><a href="#Java-HashSet" class="headerlink" title="Java HashSet"></a>Java HashSet</h1><p>HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。</p>
<p>HashSet 允许有 null 值。<br>HashSet 是无序的，即不会记录插入的顺序。</p>
<p>HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。 </p>
<h2 id="主要特点：-无序、可为null、不可重复、多线程不安全"><a href="#主要特点：-无序、可为null、不可重复、多线程不安全" class="headerlink" title="主要特点： 无序、可为null、不可重复、多线程不安全"></a>主要特点： 无序、可为null、不可重复、多线程不安全</h2><h1 id="Java-HashMap"><a href="#Java-HashMap" class="headerlink" title="Java HashMap"></a>Java HashMap</h1><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。<br>HashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。<br>HashMap 是无序的，即不会记录插入的顺序。</p>
<h3 id="Java-HashMap的常用方法"><a href="#Java-HashMap的常用方法" class="headerlink" title="Java HashMap的常用方法"></a>Java HashMap的常用方法</h3><ol>
<li><code>clear()</code>  删除 hashMap 中的所有键/值对 </li>
<li><code> clone()</code> 复制一份 hashMap</li>
<li><code>isEmpty()</code> 判断 hashMap 是否为空</li>
<li><code>size()</code>  计算 hashMap 中键/值对的数量</li>
<li><code>put()</code>  将键/值对添加到 hashMap 中</li>
<li><code>putAll()</code>  将所有键/值对添加到 hashMap 中</li>
<li><code>putIfAbsent()</code>  如果 hashMap 中不存在指定的键，则将指定的键/值对插入到 hashMap 中</li>
<li><code>remove()</code> 删除 hashMap 中指定键 key 的映射关系</li>
<li><code>containsKey()</code> 检查 hashMap 中是否存在指定的 key 对应的映射关系。</li>
<li><code>containsValue()</code>  检查 hashMap 中是否存在指定的 value 对应的映射关系</li>
<li><code>replace()</code> 替换 hashMap 中是指定的 key 对应的 value。</li>
<li><code>replaceAll()</code>  将 hashMap 中的所有映射关系替换成给定的函数所执行的结果</li>
<li><code>getOrDefault()</code> 获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值</li>
<li><code>forEach()</code>  对 hashMap 中的每个映射执行指定的操作。</li>
<li><code>enstrySet()</code>  返回 hashMap 中所有映射项的集合集合视图</li>
<li><code>keySet()</code>  返回 hashMap 中所有 key 组成的集合视图</li>
<li><code>values()</code>  返回 hashMap 中存在的所有 value 值</li>
<li><code>merge()</code> 添加键值对到 hashMap 中</li>
<li><code>compute()</code> 对 hashMap 中指定 key 的值进行重新计算</li>
<li><code>computeifAbsent()</code> 对 hashMap 中指定 key 的值进行重新计算，如果不存在这个 key，则添加到 hasMap 中</li>
<li><code>computeifPresent()</code> 对 hashMap 中指定 key 的值进行重新计算，前提是该 key 存在于 hashMap 中</li>
</ol>
<hr>
<h3 id="有关于-map-entrySet-和-keySet"><a href="#有关于-map-entrySet-和-keySet" class="headerlink" title="有关于 map.entrySet() 和 keySet():"></a>有关于 map.entrySet() 和 keySet():</h3><ol>
<li><p>如果遍历 hashMap() 时 entrySet() 方法是将 key 和 value 全部取出来,所以性能开销是可以预计的, 而<code> keySet()</code> 方法进行遍历的时候是根据取出的 key 值去查询对应的 value 值, 所以如果 key 值是比较简单的结构(如 1,2,3…)的话性能消耗上是比 <code>entrySet()</code> 方法低, 但随着 key 值得复杂度提高 <code>entrySet()</code> 的优势就会显露出来。</p>
</li>
<li><p>综合比较在只遍历 key 的时候使用 <code>keySet()</code>, 在只遍历 value 的是使用 <code>values()</code> 方法, 在遍历 key-value 的时候使用 <code>entrySet()</code> 是比较合理的选择。</p>
</li>
<li><p>如果遍历 TreeMap 的时候, 不同于 HashMap 在遍历 ThreeMap 的 key-value 时候务必使用 <code>entrySet()</code> 它要远远高于其他两个的性能, 同样只遍历 key 的时候使用 <code>keySet()</code>, 在只遍历 value 的是使用 <code>values()</code> 方法对于 TreeMap 也同样适用。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java列表｜链表</title>
    <url>/2022/02/15/Java%E5%88%97%E8%A1%A8%EF%BD%9C%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="Java-ArrayList-数组列表"><a href="#Java-ArrayList-数组列表" class="headerlink" title="Java ArrayList (数组列表)"></a>Java ArrayList (数组列表)</h1><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p>
<p>ArrayList 类位于 java.util 包中，使用前需要引入它，语法格式如下：<br>`import java.util.ArrayList; // 引入 ArrayList 类</p>
<p>ArrayList<E> objectName =new ArrayList&lt;&gt;();　 // 初始化`</E></p>
<hr>
<ol>
<li><p>添加元素<br>ArrayList 类提供了很多有用的方法，添加元素到 ArrayList 可以使用 add() 方法:</p>
</li>
<li><p>访问元素<br>访问 ArrayList 中的元素可以使用 get() 方法：</p>
</li>
<li><p>修改元素<br>如果要修改 ArrayList 中的元素可以使用 set() 方法：</p>
</li>
<li><p>删除元素<br>如果要删除 ArrayList 中的元素可以使用 remove() 方法：</p>
</li>
<li><p>计算大小<br>如果要计算 ArrayList 中的元素数量可以使用 size() 方法：</p>
</li>
<li><p>ArrayList 排序<br>Collections 类也是一个非常有用的类，位于 java.util 包中，提供的 sort() 方法可以对字符或数字列表进行排序。</p>
</li>
</ol>
<hr>
<h1 id="Java-LinkedList-链表"><a href="#Java-LinkedList-链表" class="headerlink" title="Java LinkedList (链表)"></a>Java LinkedList (链表)</h1><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。  </p>
<p>Java LinkedList（链表） 类似于 ArrayList，是一种常用的数据容器。 </p>
<p>与 ArrayList 相比，LinkedList 的增加和删除的操作效率更高，而查找和修改的操作效率较低。</p>
<p>以下情况使用 ArrayList :</p>
<pre><code>•    频繁访问列表中的某一个元素。
•    只需要在列表末尾进行添加和删除元素操作。
</code></pre>
<p>以下情况使用 LinkedList :</p>
<pre><code>•    你需要通过循环迭代来访问列表中的某些元素。
•    需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。
•    
</code></pre>
<p>LinkedList 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入 LinkedList 类</span><br><span class="line">import java.util.LinkedList; </span><br><span class="line"></span><br><span class="line">LinkedList&lt;E&gt; list = new LinkedList&lt;E&gt;();   // 普通创建方法</span><br><span class="line">或者</span><br><span class="line">LinkedList&lt;E&gt; list = new LinkedList(Collection&lt;? extends E&gt; c); // 使用集合创建链表`</span><br></pre></td></tr></table></figure>

<p>在列表开头添加元素：<br><code>sites.addFirst(&quot;Wiki&quot;);</code></p>
<p>在列表结尾添加元素：<br><code>sites.addLast(&quot;Wiki&quot;); </code><br>在列表开头移除元素： <code>sites.removeFirst();</code></p>
<p>在列表结尾移除元素： <code>sites.removeLast();</code></p>
<p>获取列表开头的元素：// 使用 <code>getFirst()</code> 获取头部元素</p>
<p>获取列表结尾的元素：// 使用 <code>getLast()</code> 获取尾部元素</p>
]]></content>
      <categories>
        <category>java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java序列化|反序列化</title>
    <url>/2022/02/17/Java%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="Java序列化｜反序列化"><a href="#Java序列化｜反序列化" class="headerlink" title="Java序列化｜反序列化"></a>Java序列化｜反序列化</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><ol>
<li><p>什么是序列化和反序列化</p>
<p> 序列化是指将Java对象转换为字节序列的过程，而反序列化则是将字节序列转换为Java对象的过程。</p>
<p> Java对象序列化是将实现了Serializable接口的对象转换成一个字节序列，能够通过网络传输、文件存储等方式传输 ，传输过程中却不必担心数据在不同机器、不同环境下发生改变，也不必关心字节的顺序或其他任何细节，并能够在以后将这个字节序列完全恢复为原来的对象(恢复这一过程称之为反序列化)。</p>
<p> 对象的序列化是非常有趣的，因为利用它可以实现轻量级持久性，“持久性”意味着一个对象的生存周期不单单取决于程序是否正在运行，它可以生存于程序的调用之间。通过将一个序列化对象写入磁盘，然后在重新调用程序时恢复该对象，从而达到实现对象的持久性的效果。</p>
<p> 本质上讲，序列化就是把实体对象状态按照一定的格式写入到有序字节流，反序列化就是从有序字节流重建对象，恢复对象状态。</p>
</li>
<li><p>为什么需要使用序列化和反序列化</p>
<p>   我们知道，不同进程/程序间进行远程通信时，可以相互发送各种类型的数据，包括文本、图片、音频、视频等，而这些数据都会以二进制序列的形式在网络上传送。</p>
<p>   那么当两个Java进程进行通信时，能否实现进程间的对象传送呢？当然是可以的！如何做到呢？这就需要使用Java序列化与反序列化了。发送方需要把这个Java对象转换为字节序列，然后在网络上传输，接收方则需要将字节序列中恢复出Java对象。</p>
<p>  我们清楚了为什么需要使用Java序列化和反序列化后，我们很自然地会想到Java序列化有哪些好处：</p>
<p> 实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上（如：存储在文件里），实现永久保存对象。<br> 利用序列化实现远程通信，即：能够在网络上传输对象。</p>
</li>
</ol>
<h2 id="二、如何实现Java序列化和反序列化"><a href="#二、如何实现Java序列化和反序列化" class="headerlink" title="二、如何实现Java序列化和反序列化"></a>二、如何实现Java序列化和反序列化</h2><p>只要对象实现了<code>Serializable、Externalizable</code>接口(该接口仅仅是一个标记接口，并不包含任何方法)，则该对象就实现了序列化。</p>
<ol>
<li>具体是如何实现的呢？</li>
</ol>
<p>序列化，首先要创建某些OutputStream对象，然后将其封装在一个<code>ObjectOutputStream</code>对象内，这时调用<code>writeObject()</code>方法，即可将对象序列化，并将其发送给<code>OutputStream</code>（对象序列化是基于字节的，因此使用的<code>InputStream和OutputStream继承的类）</code></p>
<p> 反序列化，即反向进行序列化的过程，需要将一个InputStream封装在ObjectInputStream对象内，然后调用readObject()方法，获得一个对象引用（它是指向一个向上转型的Object），然后进行类型强制转换来得到该对象。</p>
<p>假定一个User类，它的对象需要序列化，可以有如下三种方法：</p>
<p>（1）若User类仅仅实现了Serializable接口，则可以按照以下方式进行序列化和反序列化。</p>
<p>ObjectOutputStream采用默认的序列化方式，对User对象的非transient的实例变量进行序列化。</p>
<p>ObjcetInputStream采用默认的反序列化方式，对对User对象的非transient的实例变量进行反序列化。</p>
<p>（2）若User类仅仅实现了Serializable接口，并且还定义了readObject(ObjectInputStream in)和writeObject(ObjectOutputSteam out)，则采用以下方式进行序列化与反序列化。</p>
<p>ObjectOutputStream调用User对象的writeObject(ObjectOutputStream out)的方法进行序列化。<br>ObjectInputStream会调用User对象的readObject(ObjectInputStream in)的方法进行反序列化。</p>
<p>（3）若User类实现了Externalnalizable接口，且User类必须实现readExternal(ObjectInput in)和writeExternal(ObjectOutput out)方法，则按照以下方式进行序列化与反序列化。</p>
<p>ObjectOutputStream调用User对象的writeExternal(ObjectOutput out))的方法进行序列化。<br>ObjectInputStream会调用User对象的readExternal(ObjectInput in)的方法进行反序列化。</p>
<p>java.io.ObjectOutputStream：对象输出流，它的writeObject(Object obj)方法可以对指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。<br>java.io.ObjectInputStream：对象输入流，它的readObject()方法可以将从输入流中读取字节序列，再把它们反序列化成为一个对象，并将其返回。</p>
<ol start="3">
<li>什么场景下需要序列化<br> •    当你想把的内存中的对象状态保存到一个文件中或者数据库中时候。<br> •    当你想用套接字在网络上传送对象的时候。<br> •    当你想通过RMI传输对象的时候。</li>
</ol>
<p>三、注意事项</p>
<p>1、当一个父类实现序列化，子类就会自动实现序列化，不需要显式实现Serializable接口。</p>
<p>2、当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化。</p>
<p>3、并非所有的对象都可以进行序列化，比如：</p>
<pre><code>  安全方面的原因，比如一个对象拥有private，public等成员变量，对于一个要传输的对象，比如写到文件，或者进行RMI传输等等，在序列化进行传输的过程中，这个对象的private等域是不受保护的；

 资源分配方面的原因，比如socket，thread类，如果可以序列化，进行传输或者保存，也无法对他们进行重新的资源分配，而且，也是没有必要这样实现。
</code></pre>
<ol start="4">
<li><p>声明为static和transient类型的成员变量不能被序列化。因为static代表类的状态，transient代表对象的临时数据。</p>
</li>
<li><p>序列化运行时会使用一个称为 serialVersionUID 的版本号，并与每个可序列化的类相关联，该序列号在反序列化过程中用于验证序列化对象的发送者和接收者是否为该对象加载了与序列化兼容的类。如果接收者加载的该对象的类的 serialVersionUID 与对应的发送者的类的版本号不同，则反序列化将会导致 InvalidClassException。可序列化类可以通过声明名为 “serialVersionUID” 的字段（该字段必须是静态 (static)、最终 (final) 的 long 型字段）显式声明其自己的 serialVersionUID。</p>
</li>
</ol>
<p>如果序列化的类未显式的声明 serialVersionUID，则序列化运行时将基于该类的各个方面计算该类的默认 serialVersionUID 值，如“Java(TM) 对象序列化规范”中所述。不过，强烈建议 所有可序列化类都显式声明 serialVersionUID 值，原因是计算默认的 serialVersionUID 对类的详细信息具有较高的敏感性，根据编译器实现的不同可能千差万别，这样在反序列化过程中可能会导致意外的 InvalidClassException。因此，为保证 serialVersionUID 值跨不同 java 编译器实现的一致性，序列化类必须声明一个明确的 serialVersionUID 值。还强烈建议使用 private 修饰符显示声明 serialVersionUID（如果可能），原因是这种声明仅应用于直接声明类 – serialVersionUID 字段作为继承成员没有用处。数组类不能声明一个明确的 serialVersionUID，因此它们总是具有默认的计算值，但是数组类没有匹配 serialVersionUID 值的要求。</p>
<ol start="6">
<li><p>Java有很多基础类已经实现了serializable接口，比如String，Vector等。但是也有一些没有实现serializable接口的。</p>
</li>
<li><p>如果一个对象的成员变量是一个对象，那么这个对象的数据成员也会被保存！这是能用序列化解决深拷贝的重要原因。</p>
</li>
</ol>
<hr>
<p>转载链接：<a href="https://blog.csdn.net/xcbeyond/article/details/100046212">https://blog.csdn.net/xcbeyond/article/details/100046212</a>`</p>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java异常处理</title>
    <url>/2022/02/07/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="Java异常处理"><a href="#Java异常处理" class="headerlink" title="Java异常处理"></a>Java异常处理</h1><hr>
<h3 id="Throwable类-：-异常-错误"><a href="#Throwable类-：-异常-错误" class="headerlink" title="Throwable类 ： 异常 + 错误"></a>Throwable类 ： 异常 + 错误</h3><p><strong>异常和错误的区别：异常能被程序本身可以处理，错误是无法处理。</strong></p>
<p>从大体来分异常为两块：</p>
<ol>
<li>error—错误 ： 是指程序无法处理的错误，表示应用程序运行时出现的重大错误。例如jvm运行时出现的OutOfMemoryError以及Socket编程时出现的端口占用等程序无法处理的错误。</li>
<li>Exception — 异常 ：异常可分为运行时异常跟编译异常<ul>
<li><p>运行时异常：即RuntimeException及其之类的异常。这类异常在代码编写的时候不会被编译器所检测出来，是可以不需要被捕获，但是程序员也可以根据需要进行捕获抛出。常见的<br>RUNtimeException有：</p>
</li>
<li><p>NullpointException（空指针异常</p>
</li>
<li><p>ClassCastException（类型转换异常）</p>
</li>
<li><p>IndexOutOfBoundsException（数组越界异常）**等。</p>
</li>
<li><p>编译异常：RuntimeException以外的异常。这类异常在编译时编译器会提示需要捕获，如果不进行捕获则编译错误。常见编译异常有：IOException（流传输异常），SQLException（数据库操作异常）等。</p>
</li>
<li><p>java处理异常的机制：抛出异常以及捕获异常 ，一个方法所能捕捉的异常，一定是Java代码在某处所抛出的异常。简单地说，异常总是先被抛出，后被捕捉的。</p>
</li>
<li><p>throw跟throws的区别:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void test() throws Exception &#123;</span><br><span class="line">    throw new Exception();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<p>从上面这一段代码可以明显的看出两者的区别。throws表示一个方法声明可能抛出一个异常，throw表示此处抛出一个已定义的异常（可以是自定义需继承Exception，也可以是java自己给出的异常类）</p>
<h3 id="Java对于异常捕获"><a href="#Java对于异常捕获" class="headerlink" title="Java对于异常捕获"></a>Java对于异常捕获</h3><p>try—catch或try — catch — finally 代码块，程序会捕获try代码块里面的代码，若捕获到异常则进行catch代码块处理。若有finally则在catch处理后执行finally里面的代码<br><strong>finally永远都会在catch的return前被执行</strong></p>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据结构</title>
    <url>/2022/02/15/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="Java数据结构"><a href="#Java数据结构" class="headerlink" title="Java数据结构"></a>Java数据结构</h1><p>Java工具包提供了强大的数据结构。在Java中的数据结构主要包括以下几种接口和类：</p>
<pre><code>•    枚举（Enumeration）
•    位集合（BitSet）
•    向量（Vector）
•    栈（Stack）
•    字典（Dictionary）/Map
•    哈希表（Hashtable）
•    属性（Properties）
</code></pre>
<hr>
<h3 id="Java-Bitset类"><a href="#Java-Bitset类" class="headerlink" title="Java Bitset类"></a>Java Bitset类</h3><p>一个Bitset类创建一种特殊类型的数组来保存位值。BitSet中数组大小会随需要增加。这和位向量（vector of bits）比较类似。 </p>
<p>BitSet定义了两个构造方法:</p>
<p>第一个构造方法创建一个默认的对象：<br><code>BitSet()</code></p>
<p>第二个方法允许用户指定初始大小。所有位初始化为0。<br><code>BitSet(int size)</code></p>
<hr>
<h3 id="Java-Vector类"><a href="#Java-Vector类" class="headerlink" title="Java Vector类"></a>Java Vector类</h3><p>Vector 类实现了一个动态数组。和 ArrayList 很相似，但是两者是不同的：</p>
<pre><code>•    Vector 是同步访问的。
•    Vector 包含了许多传统的方法，这些方法不属于集合框架。
</code></pre>
<p>Vector 主要用在事先不知道数组的大小，或者只是需要一个可以改变大小的数组的情况。</p>
<p>Vector 类支持 4 种构造方法。 </p>
<p>第一种构造方法创建一个默认的向量，默认大小为 10：<br><code>Vector()</code></p>
<p>第二种构造方法创建指定大小的向量。<br><code>Vector(int size)</code></p>
<p>第三种构造方法创建指定大小的向量，并且增量用 incr 指定。增量表示向量每次增加的元素数目。<br><code>Vector(int size,int incr)</code></p>
<p>第四种构造方法创建一个包含集合 c 元素的向量：<br><code>Vector(Collection c)</code></p>
<hr>
<h3 id="Java-Stack类"><a href="#Java-Stack类" class="headerlink" title="Java Stack类"></a>Java Stack类</h3><p>Java Stack 类<br>栈是Vector的一个子类，它实现了一个标准的后进先出的栈。<br>堆栈只定义了默认构造函数，用来创建一个空栈。 堆栈除了包括由Vector定义的所有方法，也定义了自己的一些方法。<br><code>Stack()</code></p>
<p>其他方法：</p>
<ol>
<li><p>boolean empty() <br>测试堆栈是否为空。</p>
</li>
<li><p>Object peek( )<br>查看堆栈顶部的对象，但不从堆栈中移除它。</p>
</li>
<li><p>Object pop( )<br>移除堆栈顶部的对象，并作为此函数的值返回该对象。</p>
</li>
<li><p>Object push(Object element)<br>把项压入堆栈顶部。</p>
</li>
</ol>
<ol start="5">
<li>int search(Object element)<br>返回对象在堆栈中的位置，以 1 为基数。</li>
</ol>
<hr>
<h3 id="Java-HashTable"><a href="#Java-HashTable" class="headerlink" title="Java HashTable"></a>Java HashTable</h3><p>像HashMap一样，Hashtable在哈希表中存储键/值对。</p>
<p>当使用一个哈希表，要指定用作键的对象，以及要链接到该键的值。<br>然后，该键经过哈希处理，所得到的散列码被用作存储在该表中值的索引。</p>
<p>Hashtable定义了四个构造方法。<br>第一个是默认构造方法：<br><code>Hashtable()</code></p>
<p>第二个构造函数创建指定大小的哈希表：<br><code>Hashtable(int size)</code></p>
<p>第三个构造方法创建了一个指定大小的哈希表，并且通过fillRatio指定填充比例。<br>填充比例必须介于0.0和1.0之间，它决定了哈希表在重新调整大小之前的充满程度：<br><code>Hashtable(int size,float fillRatio)</code></p>
<p>第四个构造方法创建了一个以M中元素为初始化元素的哈希表。<br>哈希表的容量被设置为M的两倍。<br><code>Hashtable(Map m)</code></p>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的流Stream、文件和IO</title>
    <url>/2022/02/06/Java%E7%9A%84%E6%B5%81Stream%E3%80%81%E6%96%87%E4%BB%B6%E5%92%8CIO/</url>
    <content><![CDATA[<h1 id="Java的流Stream、文件和IO"><a href="#Java的流Stream、文件和IO" class="headerlink" title="Java的流Stream、文件和IO"></a>Java的流Stream、文件和IO</h1><hr>
<p>流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。 </p>
<hr>
<h2 id="读取控制台输入"><a href="#读取控制台输入" class="headerlink" title="读取控制台输入"></a>读取控制台输入</h2><p>Java 的控制台输入由 System.in 完成。<br>为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。<br>创建BufferedReader的基本语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BufferedRreader name = new BufferedReader(new inputStreamReader(System.in)) //System.in控制着控制台的输入。将System.in包装在BufferedReader之中</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="读取的方法"><a href="#读取的方法" class="headerlink" title="读取的方法:"></a>读取的方法:</h2><ol>
<li> 使用<code>read()</code> 方法从控制台获取一个字符</li>
<li>使用<code>readLine() </code> 方法从控制台之中获取一个字符串</li>
</ol>
<hr>
<h2 id="从控制台输出"><a href="#从控制台输出" class="headerlink" title="从控制台输出"></a>从控制台输出</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print()</span><br><span class="line">Printf()</span><br><span class="line">println()</span><br><span class="line">System.out.write();</span><br></pre></td></tr></table></figure>

<hr>
<p><img src="/Users/loverboy98/Documents/Blog/source/_posts/1.png" alt="读取文件"></p>
<hr>
<h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><p>该流用于从文件读取数据，它的对象可以用关键字 new 来创建。<br>构造方法：</p>
<ol>
<li><p>字符串类型的文件名来创建一个输入流对象来读取文件：<br><code>InputStream f = new FileInputStream(&quot;C:/java/hello&quot;);</code></p>
</li>
<li><p>使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">File f = new File(&quot;C:/java/hello&quot;); </span><br><span class="line">InputStream in = new FileInputStream(f);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="对创建对象可以使用的方法："><a href="#对创建对象可以使用的方法：" class="headerlink" title="对创建对象可以使用的方法："></a>对创建对象可以使用的方法：</h3><ol>
<li><p><code>public void close() throws IOException&#123;&#125;</code><br>关闭此文件输入流并释放与此流有关的所有系统资源。抛出IOException异常。</p>
</li>
<li><p><code>protected void finalize()throws IOException &#123;&#125; </code><br>这个方法清除与该文件的连接。确保在不再引用文件输入流时调用其 close 方法。抛出IOException异常。</p>
</li>
<li><p><code>public int read(int r)throws IOException&#123;&#125;</code><br>这个方法从 InputStream 对象读取指定字节的数据。返回为整数值。返回下一字节数据，如果已经到结尾则返回-1。</p>
</li>
<li><p><code>public int read(byte[] r) throws IOException&#123;&#125;</code><br>这个方法从输入流读取r.length长度的字节。返回读取的字节数。如果是文件结尾则返回-1。</p>
</li>
</ol>
<ol start="5">
<li><code>public int available() throws IOException&#123;&#125; </code><br>返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取的字节数。返回一个整数值。</li>
</ol>
<h2 id="FileOutPutStream"><a href="#FileOutPutStream" class="headerlink" title="FileOutPutStream"></a>FileOutPutStream</h2><p> 创建一个文件并向文件中写入数据 如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。<br>两种创建输出流对象的方法：</p>
<ol>
<li><code> OutputStream name = new FileOutputStream(“locate”)</code></li>
<li><code> File file =new File(“Locate”) OutputStream fOut = new FileOutputStream(f)</code></li>
</ol>
<hr>
<h2 id="Java中的目录"><a href="#Java中的目录" class="headerlink" title="Java中的目录"></a>Java中的目录</h2><h3 id="创建目录："><a href="#创建目录：" class="headerlink" title="创建目录："></a>创建目录：</h3><p>File类中有两个方法可以用来创建文件夹：</p>
<ul>
<li><p>mkdir( )方法创建一个文件夹，成功则返回true，失败则返回false。失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。</p>
</li>
<li><p>mkdirs()方法创建一个文件夹和它的所有父文件夹。</p>
</li>
</ul>
<hr>
<h3 id="读取目录"><a href="#读取目录" class="headerlink" title="读取目录"></a>读取目录</h3><p>一个目录其实就是一个 File 对象，它包含其他文件和文件夹。<br>如果创建一个 File 对象并且它是一个目录，那么调用 <code>isDirectory() </code>方法会返回 true。 </p>
<p>可以通过调用该对象上的  <code>list() </code> 方法，来提取它包含的文件和文件夹的列表。 </p>
<hr>
<h2 id="删除目录或文件"><a href="#删除目录或文件" class="headerlink" title="删除目录或文件"></a>删除目录或文件</h2><p>删除文件可以使用 java.io.File.delete() 方法。</p>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java继承</title>
    <url>/2022/02/07/Java%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1 id="Java继承"><a href="#Java继承" class="headerlink" title="Java继承"></a>Java继承</h1><hr>
<h2 id="1-为什么使用继承"><a href="#1-为什么使用继承" class="headerlink" title="1. 为什么使用继承"></a>1. 为什么使用继承</h2><p>从已有的类派生出新的类，称为继承。<br>在不同的类中也可能会有共同的特征和动作，可以把这些共同的特征和动作放在一个类中，让其它类共享。<br>因此可以定义一个通用类，然后将其扩展为其它多个特定类，这些特定类继承通用类中的特征和动作。<br>继承是 Java 中实现软件重用的重要手段，避免重复，易于维护，易于理解。 </p>
<hr>
<h2 id="继承的特性"><a href="#继承的特性" class="headerlink" title="继承的特性"></a>继承的特性</h2><pre><code>•    子类拥有父类非 private 的属性、方法。
•    子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。
•    子类可以用自己的方式实现父类的方法。
•    Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 B 类继承 A 类，C 类继承 B 类，所以按照关系就是 B 类是 C 类的父类，A 类是 B 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。
•    提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）
</code></pre>
<hr>
<h2 id="继承关键字-extends-和-implements"><a href="#继承关键字-extends-和-implements" class="headerlink" title="继承关键字   extends 和 implements"></a>继承关键字   extends 和 implements</h2><h3 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h3><p>在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</p>
<h3 id="implements关键字"><a href="#implements关键字" class="headerlink" title="implements关键字"></a>implements关键字</h3><p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）</p>
<h2 id="super-与-this-关键字"><a href="#super-与-this-关键字" class="headerlink" title="super 与 this 关键字"></a>super 与 this 关键字</h2><h3 id="super关键字："><a href="#super关键字：" class="headerlink" title="super关键字："></a>super关键字：</h3><p>我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p>
<h3 id="this关键字：指向自己的引用"><a href="#this关键字：指向自己的引用" class="headerlink" title="this关键字：指向自己的引用"></a>this关键字：指向自己的引用</h3><h2 id="Final关键字"><a href="#Final关键字" class="headerlink" title="Final关键字"></a>Final关键字</h2><p>final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写：</p>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java耦合性</title>
    <url>/2022/02/15/Java%E8%80%A6%E5%90%88%E6%80%A7/</url>
    <content><![CDATA[<h1 id="耦合性"><a href="#耦合性" class="headerlink" title="耦合性"></a>耦合性</h1><p>耦合性(Coupling)</p>
<pre><code>耦合性(Coupling)，也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。
模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。
模块间联系越多，其耦合性越强，同时表明其独立性越差( 降低耦合性，可以提高其独立性)。
软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准。划分模块的一个准则就是高内聚低耦合。
形象的说，就是要将代码写的和主机的排线一样，低耦合的模块好像你看你主机排线中的随便一条就知道这条线是干啥一样拔掉会不会影响其他排线的功能一样，低耦合的模块就好比鼠标线一样拔掉它只影响它自身的鼠标功能，高耦合的模块就好比主机电源线一拔掉不只影响它自身的功能其他功能也被影响了。
</code></pre>
<h4 id="构成耦合性的七种类型"><a href="#构成耦合性的七种类型" class="headerlink" title="构成耦合性的七种类型"></a>构成耦合性的七种类型</h4><p>一般模块之间可能的连接方式有七种，构成耦合性的七种类型。它们之间的关系为（独立性由强到弱）</p>
<ol>
<li><p>非直接耦合(Nondirect Coupling)</p>
<p> 如果两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制和调用来实现的，这就是非直接耦合。这种耦合的模块独立性最强。</p>
</li>
<li><p>数据耦合(Data Coupling)</p>
<p> 如果一个模块访问另一个模块时，彼此之间是通过数据参数(不是控制参数、公共数据结构或外部变量)来交换输入、输出信息的，则称这种耦合为数据耦合。由于限制了只通过参数表传递数据，按数据耦合开发的程序界面简单、安全可靠。因此，数据耦合是松散的耦合，模块之间的独立性比较强。在软件程序结构中至少必须有这类耦合。</p>
</li>
<li><p>印记耦合(Stamp Coupling)</p>
<p> 如果一组模块通过参数表传递记录信息，就是标记耦合。事实上，这组模块共享了这个记录，它是某一数据结构的子结构，而不是简单变量。这要求这些模块都必须清楚该记录的结构，并按结构要求对此记录进行操作。在设计中应尽量避免这种耦合，它使在数据结构上的操作复杂化了。如果采取“信息隐蔽”的方法，把在数据结构上的操作全部集中。</p>
</li>
<li><p>控制耦合(Control Coupling)</p>
<p> 如果一个模块通过传送开关、标志、名字等控制信息，明显地控制选择另一模块的功能，就是控制耦合。这种耦合的实质是在单一接口上选择多功能模块中的某项功能。因此，对所控制模块的任何修改，都会影响控制模块。另外，控制耦合也意味着控制模块必须知道所控制模块内部的一些逻辑关系，这些都会降低模块的独立性。</p>
</li>
<li><p>外部耦合(External Coupling)</p>
<p> 一组模块都访问同一全局简单变量而不是同一全局数据结构，而且不是通过参数表传递该全局变量的信息，则称之为外部耦合。例如C语言程序中各个模块都访问被说明为extern类型的外部变量。外部耦合引起的问题类似于公共耦合，区别在于在外部耦合中不存在依赖于一个数据结构内部各项的物理安排。</p>
</li>
<li><p>公共耦合(Common Coupling)</p>
<p> 若一组模块都访问同一个公共数据环境，则它们之间的耦合就称为公共耦合。公共的数据环境可以是全局数据结构、共享的通信区、内存的公共覆盖区等。<br> 这种耦合会引起下列问题：</p>
<p>  所有公共耦合模块都与某一个公共数据环境内部各项的物理安排有关，若修改某个数据的大小，将会影响到所有的模块。<br> 无法控制各个模块对公共数据的存取，严重影响软件模块的可靠性和适应性。 公共数据名的使用，明显降低了程序的可读性。</p>
</li>
</ol>
<pre><code>公共耦合的复杂程度随耦合模块的个数增加而显著增加。若只是两个模块之间有公共数据环境，则公共耦合有两种情况。


若一个模块只是往公共数据环境里传送数据，而另一个模块只是从公共数据环境中取数据，则这种公共耦合叫做松散公共耦合。

若两个模块都从公共数据环境中取数据，又都向公共数据环境里送数据，则这种公共耦合叫做紧密公共耦合。只有在模块之间共享的数据很多，且通过参数表传递不方便时，才使用公共耦合。否则，还是使用模块独立性比较高的数据耦合好些。
</code></pre>
<ol start="7">
<li><p>内容耦合(Content Coupling)</p>
<p> 如果发生下列情形，两个模块之间就发生了内容耦合。 一个模块直接访问另一个模块的内部数据； 一个模块不通过正常入口转到另一模块内部；</p>
<p> 两个模块有一部分程序代码重叠(只可能出现在汇编语言中)； 一个模块有多个入口。</p>
<p> 在内容耦合的情形，所访问模块的任何变更，或者用不同的编译器对它再编译，<br> 都会造成程序出错。好在大多数高级程序设计语言已经设计成不允许出现内容 耦合。它一般出现在汇编语言程序中。这种耦合是模块独立性最弱的耦合。<br>————————————————</p>
</li>
</ol>
<p>转载链接： <a href="https://blog.csdn.net/weixin_43576565/article/details/105906787">https://blog.csdn.net/weixin_43576565/article/details/105906787</a> </p>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合框架</title>
    <url>/2022/02/15/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h1><hr>
<p>Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键/值对映射。</p>
<p>Collection 接口又有 3 种子类型，List、Set 和 Queue，再下面是一些抽象类，最后是具体实现类，常用的有 <code>ArrayList、LinkedList、HashSet、LinkedHashSet、HashMap、LinkedHashMap</code> 等</p>
<hr>
<h2 id="集合接口："><a href="#集合接口：" class="headerlink" title="集合接口："></a>集合接口：</h2><ol>
<li><p>Collection 接口<br>Collection 是最基本的集合接口，一个 Collection 代表一组 Object，即 Collection 的元素, Java不提供直接继承自Collection的类，只提供继承于的子接口(如List和set)。Collection 接口存储一组不唯一，无序的对象。</p>
</li>
<li><p>List 接口<br>List接口是一个有序的 Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，第一个元素的索引为 0，而且允许有相同的元素。<br>List 接口存储一组不唯一，有序（插入顺序）的对象。</p>
</li>
<li><p>Set<br>Set 具有与 Collection 完全一样的接口，只是行为上不同，Set 不保存重复的元素。Set 接口存储一组唯一，无序的对象。</p>
</li>
</ol>
<ol start="4">
<li>SortedSet<br>继承于Set保存有序的集合</li>
</ol>
<ol start="5">
<li><p>Map<br>Map 接口存储一组键值对象，提供key（键）到value（值）的映射。</p>
</li>
<li><p>Map.Entry<br>描述在一个Map中的一个元素（键/值对）。是一个 Map 的内部接口。</p>
</li>
<li><p>SortedMap<br>继承于 Map，使 Key 保持在升序排列。</p>
</li>
<li><p>Enumeration<br>这是一个传统的接口和定义的方法，通过它可以枚举（一次获得一个）对象集合中的元素。这个传统接口已被迭代器取代。</p>
</li>
</ol>
<hr>
<h2 id="Set和List的区别"><a href="#Set和List的区别" class="headerlink" title="Set和List的区别"></a>Set和List的区别</h2><pre><code>•    1. Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。
•    2. Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 &lt;实现类有HashSet,TreeSet&gt;。
•    3. List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 &lt;实现类有ArrayList,LinkedList,Vector&gt; 。
</code></pre>
<hr>
<h2 id="集合实现类（集合类）"><a href="#集合实现类（集合类）" class="headerlink" title="集合实现类（集合类）"></a>集合实现类（集合类）</h2><p>Java提供了一套实现了Collection接口的标准集合类。其中一些是具体类，这些类可以直接拿来使用，而另外一些是抽象类，提供了接口的部分实现。 </p>
<ol>
<li><p>AbstractCollection <br>实现了大部分的集合接口。</p>
</li>
<li><p>AbstractList <br>继承于AbstractCollection 并且实现了大部分List接口。</p>
</li>
<li><p>AbstractSequentialList <br>继承于 AbstractList ，提供了对数据元素的链式访问而不是随机访问。</p>
</li>
<li><p>LinkedList<br>该类实现了List接口，允许有null（空）元素。主要用于创建链表数据结构，该类没有同步方法，如果多个线程同时访问一个List，则必须自己实现访问同步，解决方法就是在创建List时候构造一个同步的List。例如：<br><code>List list=Collections.synchronizedList(newLinkedList(...));</code></p>
</li>
</ol>
<ol start="5">
<li>ArrayList<br>该类也是实现了List的接口，实现了可变大小的数组，随机访问和遍历元素时，提供更好的性能。该类也是非同步的,在多线程的情况下不要使用。ArrayList 增长当前长度的50%，插入删除效率低。 </li>
</ol>
<ol start="6">
<li><p> AbstractSet <br>继承于AbstractCollection 并且实现了大部分Set接口。</p>
</li>
<li><p> HashSet<br>该类实现了Set接口，不允许出现重复元素，不保证集合中元素的顺序，允许包含值为null的元素，但最多只能一个。</p>
</li>
</ol>
<ol start="8">
<li><p>LinkedHashSet<br>具有可预知迭代顺序的 Set 接口的哈希表和链接列表实现。</p>
</li>
<li><p>HashMap<br>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。<br>该类实现了Map接口，根据键的HashCode值存储数据，具有很快的访问速度，最多允许一条记录的键为null，不支持线程同步。 </p>
</li>
</ol>
<ol start="10">
<li><p> TreeMap<br>继承了AbstractMap，并且使用一颗树。</p>
</li>
<li><p> WeakHashMap<br>继承AbstractMap类，使用弱密钥的哈希表。</p>
</li>
<li><p> LinkedHashMap<br>继承于HashMap，使用元素的自然顺序对元素进行排序.</p>
</li>
</ol>
<ol start="13">
<li>IdentityHashMap<br>继承AbstractMap类，比较文档时使用引用相等。</li>
</ol>
<hr>
<h3 id="Java-迭代器-Iterator"><a href="#Java-迭代器-Iterator" class="headerlink" title="Java 迭代器 Iterator"></a>Java 迭代器 Iterator</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; ite=list.iterator();  //作为iterator的声明</span><br><span class="line">while(ite.hasNext())//判断下一个元素之后有值 &#123; </span><br><span class="line">    System.out.println(ite.next()); &#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>java转型问题</title>
    <url>/2022/02/13/java%E8%BD%AC%E5%9E%8B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Java-转型问题"><a href="#Java-转型问题" class="headerlink" title="Java 转型问题"></a>Java 转型问题</h1><p>其实并不复杂，只要记住一句话：<code>父类引用指向子类对象。</code></p>
<p>什么叫父类引用指向子类对象</p>
<p>从 2 个名词开始说起：<em>向上转型(upcasting) 、向下转型(downcasting)。</em></p>
<p>举个例子：有2个类，Father 是父类，Son 类继承自 Father。<br><code>Father f1 = new Son();  </code> // 这就叫 upcasting （向上转型)<br>// 现在 f1 引用指向一个Son对象</p>
<p><code>Son s1 = (Son)f1;   // 这就叫 downcasting (向下转型) //</code><br>现在f1 还是指向 Son对象<br>第2个例子：<br><code>Father f2 = new Father(); Son s2 = (Son)f2;  </code>     // 出错，子类引用不能指向父类对象</p>
<p>你或许会问，第1个例子中：Son s1 = (Son)f1; 为什么是正确的呢。</p>
<p>很简单因为 f1 指向一个子类对象，Father f1 = new Son(); 子类 s1 引用当然可以指向子类对象了。<br>而 f2 被传给了一个 Father 对象，Father f2 = new Father(); 子类 s1 引用不能指向父类对象。</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol>
<li><p>父类引用指向子类对象，而子类引用不能指向父类对象。</p>
</li>
<li><p>把子类对象直接赋给父类引用叫upcasting向上转型，向上转型不用强制转换吗，如：<br>Father f1 = new Son();</p>
</li>
<li><p>把指向子类对象的父类引用赋给子类引用叫向下转型(downcasting)，要强制转换，如：<br>f1 就是一个指向子类对象的父类引用。把f1赋给子类引用 s1 即 Son s1 = (Son)f1;<br>其中 f1 前面的(Son)必须加上，进行强制转换</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>单链表原地逆置</title>
    <url>/2022/03/09/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8E%9F%E5%9C%B0%E9%80%86%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="单链表原地逆置"><a href="#单链表原地逆置" class="headerlink" title="单链表原地逆置"></a>单链表原地逆置</h2><p>前段时间刷leetcode无意见重新做这道题，在之前408解题的时候有简单学习，但是现在遗忘。温故而知新</p>
<p>Java代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode reverseList(ListNode head) &#123;</span><br><span class="line">        //前期准备  （1）</span><br><span class="line">        ListNode p = head.next;</span><br><span class="line">         head = null;</span><br><span class="line">        </span><br><span class="line">        //向后遍历 （2）</span><br><span class="line">        while (p != null) &#123;</span><br><span class="line">            ListNode nextTemp = p.next;</span><br><span class="line">            p.next = head.next;</span><br><span class="line">            head.next = p;</span><br><span class="line">            p = nextTemp;</span><br><span class="line">        &#125;</span><br><span class="line">        return p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 代码的前期准备 (1) </p>
<ul>
<li> 使建立的ListNode指向head-&gt;next ;使得head-&gt;next = null<img src="/2022/03/09/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8E%9F%E5%9C%B0%E9%80%86%E7%BD%AE/01.png" class title="逆置的前期准备"></li>
</ul>
<p>执行过程 (2)</p>
<ul>
<li>执行 （p != null） 用作判断是否执行到链表结尾</li>
<li>设置 tmp=p-&gt;next 用于下一次循环的开始</li>
<li>p.next = l.next 表示这个节点指向上一个节点（构成一个反向链表）</li>
<li>头节点head.next -&gt; p 表明头节点指向新节点的开头（头插法）</li>
<li>p=r 开启下一个循环<img src="/2022/03/09/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8E%9F%E5%9C%B0%E9%80%86%E7%BD%AE/02.png" class title="逆置头插第一个节点"></li>
</ul>
<p>第二轮循环</p>
<img src="/2022/03/09/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8E%9F%E5%9C%B0%E9%80%86%E7%BD%AE/03.png" class title="逆置头插第二个节点">

<p>第三轮循环</p>
<img src="/2022/03/09/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8E%9F%E5%9C%B0%E9%80%86%E7%BD%AE/04.png" class title="逆置头插第三个节点">

<p>之后（3）<br>一次遍历知道头插到最后一个节点</p>
]]></content>
      <categories>
        <category>算法积累</category>
      </categories>
      <tags>
        <tag>算法积累</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象类与接口总结</title>
    <url>/2022/02/13/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="抽象类总结规定"><a href="#抽象类总结规定" class="headerlink" title="抽象类总结规定"></a>抽象类总结规定</h1><ol>
<li>抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。</li>
<li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li>
<li>抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。  </li>
<li>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。</li>
<li>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。 </li>
</ol>
<hr>
<h2 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h2><h3 id="1-语法层面上的区别"><a href="#1-语法层面上的区别" class="headerlink" title="1. 语法层面上的区别"></a>1. 语法层面上的区别</h3><pre><code>1）抽象类可以提供成员方法的实现细节，而接口中只能存在public abstract 方法； 
2）抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的； 
3）接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法； 
4）一个类只能继承一个抽象类，而一个类却可以实现多个接口。 
</code></pre>
<h2 id="2-设计层面上的区别"><a href="#2-设计层面上的区别" class="headerlink" title="2. 设计层面上的区别"></a>2. 设计层面上的区别</h2><ul>
<li><p>抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。举个简单的例子，飞机和鸟是不同类的事物，但是它们都有一个共性，就是都会飞。那么在设计的时候，可以将飞机设计为一个类 Airplane，将鸟设计为一个类 Bird，但是不能将 飞行 这个特性也设计为类，因此它只是一个行为特性，并不是对一类事物的抽象描述。此时可以将 飞行 设计为一个接口Fly，包含方法fly( )，然后Airplane和Bird分别根据自己的需要实现Fly这个接口。然后至于有不同种类的飞机，比如战斗机、民用飞机等直接继承Airplane即可，对于鸟也是类似的，不同种类的鸟直接继承Bird类即可。从这里可以看出，继承是一个 “是不是”的关系，而 接口 实现则是 “有没有”的关系。如果一个类继承了某个抽象类，则子类必定是抽象类的种类，而接口实现则是有没有、具备不具备的关系，比如鸟是否能飞（或者是否具备飞行这个特点），能飞行则可以实现这个接口，不能飞行就不实现这个接口。</p>
</li>
<li><p>设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种辐射式设计。什么是模板式设计？最简单例子，大家都用过 ppt 里面的模板，如果用模板 A 设计了 ppt B 和 ppt C，ppt B 和 ppt C 公共的部分就是模板 A 了，如果它们的公共部分需要改动，则只需要改动模板 A 就可以了，不需要重新对 ppt B 和 ppt C 进行改动。而辐射式设计，比如某个电梯都装了某种报警器，一旦要更新报警器，就必须全部更新。也就是说对于抽象类，如果需要添加新的方法，可以直接在抽象类中添加具体的实现，子类可以不进行变更；而对于接口则不行，如果接口进行了变更，则所有实现这个接口的类都必须进行相应的改动。<br>下面看一个网上流传最广泛的例子：门和警报的例子：门都有 open() 和 close() 两个动作，此时我们可以定义通过抽象类和接口来定义这个抽象概念：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abstract class Door &#123;</span><br><span class="line">    public abstract void open();</span><br><span class="line">    public abstract void close();</span><br><span class="line">&#125;</span><br><span class="line">或者：</span><br><span class="line">interface Door &#123;</span><br><span class="line">    public abstract void open();</span><br><span class="line">    public abstract void close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是现在如果我们需要门具有报警 的功能，那么该如何实现？下面提供两种思路：</p>
</li>
<li><p>将这三个功能都放在抽象类里面，但是这样一来所有继承于这个抽象类的子类都具备了报警功能，但是有的门并不一定具备报警功能；</p>
</li>
<li><p>将这三个功能都放在接口里面，需要用到报警功能的类就需要实现这个接口中的 open( ) 和 close( )，也许这个类根本就不具备 open( ) 和 close( ) 这两个功能，比如火灾报警器。<br>从这里可以看出， Door 的 open() 、close() 和 alarm() 根本就属于两个不同范畴内的行为，open() 和 close() 属于门本身固有的行为特性，而 alarm() 属于延伸的附加行为。因此最好的解决办法是单独将报警设计为一个接口，包含 alarm() 行为，Door 设计为单独的一个抽象类，包含 open 和 close 两种行为。再设计一个报警门继承 Door 类和实现 Alarm 接口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Alram &#123;</span><br><span class="line">    void alarm();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">abstract class Door &#123;</span><br><span class="line">    void open();</span><br><span class="line">    void close();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class AlarmDoor extends Door implements Alarm &#123;</span><br><span class="line">    void oepn() &#123;</span><br><span class="line">      //....</span><br><span class="line">    &#125;</span><br><span class="line">    void close() &#123;</span><br><span class="line">      //....</span><br><span class="line">    &#125;</span><br><span class="line">    void alarm() &#123;</span><br><span class="line">      //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>记录Mac系统结合Github搭建个人博客之中遇到的一些坑</title>
    <url>/2022/01/28/%E8%AE%B0%E5%BD%95Mac%E7%B3%BB%E7%BB%9F%E7%BB%93%E5%90%88Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
    <content><![CDATA[<p>#记录Mac系统结合Github搭建个人博客之中遇到的一些坑</p>
<hr>
<p>##hexo的安装</p>
<ol>
<li>使用homebrew 或者npm安装node.js 也可以直接下载node.pkg包来安装</li>
</ol>
<hr>
<p>##GitHub与个人pc之间 如果使用hexo来部署自己的博客 Github在21年9月左右已经不支持博客内容通过push来推送：</p>
<p><strong>解决方法</strong>：</p>
<p>使用ssh配置 在本地<code>$ ls -al ~/.ssh</code></p>
<ol>
<li>生成 ssh key:</li>
</ol>
<p><code>$ ssh-keygen -t rsa -C&quot;你的github注册时邮箱“</code></p>
<ol start="2">
<li>来生成 id_rsa.pub 和 id_dsa.pub</li>
</ol>
<p>将id_rsa.pub之中的内容添加到个人Github主页的settings-&gt;SSH and GPG keys之中</p>
<p>new SSH key添加之中的内容即可</p>
<hr>
<h2 id="hexo的常用命令："><a href="#hexo的常用命令：" class="headerlink" title="hexo的常用命令："></a>hexo的常用命令：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">hexo n &quot;我的博客&quot;==hexo new &quot;我的博客&quot;#新建文章</span><br><span class="line"></span><br><span class="line">hexo p==hexo publish</span><br><span class="line"></span><br><span class="line">hexo g==hexo generate#生成</span><br><span class="line"></span><br><span class="line">hexo s==hexo server#启动服务预览</span><br><span class="line"></span><br><span class="line">hexo d==hexo deploy#部署</span><br><span class="line"></span><br><span class="line">hexo clean#清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>##Markdown编写时的细节：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">title:(文章的标题)</span><br><span class="line"></span><br><span class="line">mp3:所配置音乐的绝对地址</span><br><span class="line"></span><br><span class="line">cover:配置封面(绝对地址)</span><br><span class="line"></span><br><span class="line">date：日期</span><br><span class="line"></span><br><span class="line">categories:&quot;(分类)&quot;</span><br><span class="line"></span><br><span class="line">tags&quot;(标签)&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>个人学习</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>重写与重载</title>
    <url>/2022/02/13/%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="overload与override"><a href="#overload与override" class="headerlink" title="overload与override"></a>overload与override</h1><ol>
<li>父类引用指向子类对象，而子类引用不能指向父类对象。</li>
<li>把子类对象直接赋给父类引用叫 <strong>upcasting向上转型</strong> ，向上转型不用强制转换吗，如：<br><code>Father f1 = new Son();</code></li>
<li>把指向子类对象的父类引用赋给子类引用叫**向下转型(downcasting)**，要强制转换，如：<br>f1 就是一个指向子类对象的父类引用。把f1赋给子类引用 s1 即 <code>Son s1 = (Son)f1;</code><br>其中 f1 前面的(Son)必须加上，进行强制转换。</li>
</ol>
<hr>
<h2 id="重写-Override"><a href="#重写-Override" class="headerlink" title="重写(Override)"></a>重写(Override)</h2><p><strong>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！</strong> </p>
<p>重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。<br>重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。</p>
<hr>
<h3 id="方法的重写规则"><a href="#方法的重写规则" class="headerlink" title="方法的重写规则"></a>方法的重写规则</h3><p>•    参数列表与被重写方法的参数列表必须完全相同。</p>
<p>•    返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</p>
<p>•    访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</p>
<p>•    父类的成员方法只能被它的子类重写。</p>
<p>•    声明为 final 的方法不能被重写。</p>
<p>•    声明为 static 的方法不能被重写，但是能够被再次声明。</p>
<p>•    子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</p>
<p>•    子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</p>
<p>•    重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</p>
<p>•    构造方法不能被重写。</p>
<p>•    如果不能继承一个类，则不能重写该类的方法。</p>
<hr>
<h2 id="重载-Overload"><a href="#重载-Overload" class="headerlink" title="重载(Overload)"></a>重载(Overload)</h2><p><strong>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</strong></p>
<p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p>
<p>最常用的地方就是构造器的重载。<br>重载规则:</p>
<p>•    被重载的方法必须改变参数列表(参数个数或类型不一样（包括参数的传递顺序）)； </p>
<p>•    被重载的方法可以改变返回类型；</p>
<p>•    被重载的方法可以改变访问修饰符；</p>
<p>•    被重载的方法可以声明新的或更广的检查异常；</p>
<p>•    方法能够在同一个类中或者在一个子类中被重载。</p>
<p>•    无法以返回值类型作为重载函数的区分标准。 </p>
<hr>
<p><em>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理<br>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</em></p>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>3.8.2022学习日志</title>
    <url>/2022/03/09/3-8-2022%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h3 id="高内聚-低耦合"><a href="#高内聚-低耦合" class="headerlink" title="高内聚 低耦合"></a>高内聚 低耦合</h3><ul>
<li>耦合：就是模块间的关联度，低耦合就是关联度要小（例如减少继承和友元，全局变量）</li>
<li>内聚：模块的功能，高内聚就是模块的功能要尽可能简洁，最好一个模块只完成一个功能</li>
</ul>
<h3 id="与equals-的区别"><a href="#与equals-的区别" class="headerlink" title="== 与equals()的区别"></a>== 与equals()的区别</h3><h4 id="是一个比较运算符"><a href="#是一个比较运算符" class="headerlink" title="== 是一个比较运算符"></a>== 是一个比较运算符</h4><ul>
<li>对于基本数据类型  == 比较值是否相等</li>
<li>队医引用数据类型  判断两者是否同一个地址</li>
</ul>
<h4 id="equals-是Object中的方法，只能用于判断引用类型"><a href="#equals-是Object中的方法，只能用于判断引用类型" class="headerlink" title="equals()是Object中的方法，只能用于判断引用类型"></a>equals()是Object中的方法，只能用于判断引用类型</h4><ul>
<li>默认是判断地址相等 </li>
<li>但其子类 通常改写equals()方法 ，用来判断属性是否相等。</li>
</ul>
<h2 id="什么是多态，那些体现"><a href="#什么是多态，那些体现" class="headerlink" title="什么是多态，那些体现"></a>什么是多态，那些体现</h2><ul>
<li>多态： 方法或对象具有多种形态，是OOP三大特征(封装、继承、多态)，建立在前两者智商的具体体现。</li>
</ul>
<ol>
<li>方法多态</li>
</ol>
<ul>
<li>（1）重载体现多态 (OverLoad)</li>
<li>（2） 重写体现多态 （OverWrite）</li>
</ul>
<ol start="2">
<li>对象多态</li>
</ol>
<ul>
<li>(1) 对象的编译类型和运行类型可以不一致，编译类型在定义时，就确定，不可变。</li>
<li>(2) 对象的运行类型是可以改变的，通过getClass()来查看运行类型</li>
<li>(3) 编译类型 查看 = 左边； 运行类型查看 = 右边 </li>
</ul>
<h3 id="Java动态绑定机制"><a href="#Java动态绑定机制" class="headerlink" title="Java动态绑定机制"></a>Java动态绑定机制</h3><ol>
<li>当调用对象方法的时候，该方法会和该对象的<em>内存地址/运行类型</em> 绑定</li>
<li>当调用对象属性时， 没有动态绑定机制，哪里声明，在哪里使用</li>
</ol>
<p><code>summon: 属性看编译类 方法看运行类</code></p>
<h3 id="静态变量-方法-static"><a href="#静态变量-方法-static" class="headerlink" title="静态变量/ 方法 static"></a>静态变量/ 方法 static</h3>]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>3.15LeetCode总结</title>
    <url>/2022/03/15/3-15LeetCode%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="LeetCode总结"><a href="#LeetCode总结" class="headerlink" title="LeetCode总结"></a>LeetCode总结</h2><ul>
<li>3.13日积累</li>
</ul>
<p> 《二叉树的层次遍历》<br> 给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。<br> 解题思路总结：难点是返回的每层遍历需要返回不同长度的数组。<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 构造返回一个栈来递归保存</span><br><span class="line">2. 如果当前queue.poll()节点的left、right ！= null 添加到queue之中 queue.offer(left| right)</span><br><span class="line">3. 如果每个栈的长度动态变化， 一层level结束， 添加到返回节点ret.add(level),</span><br><span class="line">换到下一个数组返回， 并且添加到返回数组之中</span><br></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>3.14积累</li>
</ul>
<ol>
<li>将有序数组转换为二叉搜索树</li>
</ol>
<p>给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 高度平衡 二叉搜索树。</p>
<p>高度平衡 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</p>
<p>解题思路： 满足两子树高度不差1 则从中间节点开始构造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 运用分治的思想 构造一个BST节点生成方法， 返回Treenode节点</span><br><span class="line">2. 从中间节点开始构造 root = low+(high-low)/2 开始</span><br><span class="line"></span><br><span class="line">方法体&#123;</span><br><span class="line">    TreeNode buildBST(nums, low, high)&#123; //用于解决最后分支节点</span><br><span class="line">        if(low &gt;high)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = new TreeNode(nums[mid])//构造器直接构造</span><br><span class="line"></span><br><span class="line">        root.left|right = buildBST(nums, low, mid-1)|(nums, mid+1, hight)</span><br><span class="line">        //用来分治构造两个左右节点</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>合并两个有序数组</li>
</ul>
<p>给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。</p>
<p>解法 1<br><code>直接将nums2复制到nums1之中，再调用Arrays.sort(nums1)即可</code></p>
<p>解法 2:<br><code>动用双指针， 对于两个已经排序的数组进行选择 插入新的sort[n+m] 最后再将sort复制到返回数组nums1之中</code></p>
<hr>
<ol start="2">
<li>第一个错误版本<br>假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。</li>
</ol>
<p>你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p>
<p>解法思路：<br><code>二分查找调用isBadVersion接口</code></p>
<hr>
<ul>
<li>3.15</li>
</ul>
<ol>
<li>爬楼梯</li>
</ol>
<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>解题思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用动态划分的思想</span><br><span class="line"> public int climbStairs(int n) &#123;</span><br><span class="line">        int p = 0, q = 0, r= 1;</span><br><span class="line">        for(int i=1; i&lt;=n; i++)&#123;</span><br><span class="line">            /** q表示前二集的需要方法</span><br><span class="line">             p 代表前一阶需要的方法数</span><br><span class="line">            r 代表目前一阶需要的方法</span><br><span class="line">            f(n) = f(n-1)+f(n-2)</span><br><span class="line">             */</span><br><span class="line">            p = q;</span><br><span class="line">            q = r;</span><br><span class="line">            r = p+q;</span><br><span class="line">        &#125;</span><br><span class="line">        return r;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr>
<ol start="2">
<li> 买卖股票的最佳时机<br>给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。</li>
</ol>
<p>求解方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 暴力解 算出每个之后的数组计算出的最大收益</span><br><span class="line">2. 动态规划 一次遍历 找到最小的狗买点之后，在对于收益进行一次动态计算</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public int maxProfit(int[] prices) &#123;</span><br><span class="line">        int min = Integer.MAX_VALUE;</span><br><span class="line">        int Profit = 0;</span><br><span class="line">        for(int i=0; i&lt;prices.length; i++)&#123;</span><br><span class="line">            if(prices[i] &lt; min)&#123; //price中改变最小值</span><br><span class="line">                //用min来标记最小值</span><br><span class="line">                min = prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">            //计算最大值</span><br><span class="line">            if(Profit &lt;= prices[i]-min)&#123;</span><br><span class="line">                Profit = prices[i]-min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return Profit;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>算法积累</category>
      </categories>
      <tags>
        <tag>算法积累</tag>
      </tags>
  </entry>
  <entry>
    <title>3.16近期总结</title>
    <url>/2022/03/17/3-16%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="Chapter10面向对象编程-高级"><a href="#Chapter10面向对象编程-高级" class="headerlink" title="Chapter10面向对象编程(高级)"></a>Chapter10面向对象编程(高级)</h3><ol>
<li>类变量/类方法</li>
</ol>
<ul>
<li><p>static 静态变量 是同一个类所有对象共享的 。 static 变量在类加载的时候 就生成了。(jdk7.0以前在类方法区中| jdk8.0及以后 在类堆中存储)</p>
</li>
<li><p><code>类变量是所有对象共享的，而实例变量是每个对象独享的。</code></p>
</li>
<li><p>类方法： 当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率。(不需要创建对象，直接调用类使用)</p>
</li>
<li><p>类方法(静态方法)中，不能使用和对象相关的关键字，“This”“Super”</p>
</li>
<li><p>静态方法只能访问静态成员，非静态方法，都可以访问。</p>
</li>
</ul>
<ol start="2">
<li>代码块</li>
</ol>
<ul>
<li>称为初始化块， 属于类的成员:<em>(属性、方法、代码块、构造器、内部类)</em><br>可以为静态， 在类加载｜对象声明时，隐式的调用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(static）&#123;</span><br><span class="line">    代码</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li><p>类什么时候加载</p>
<ul>
<li>创建对象实例时(new)</li>
<li>创建子类对象实例，父类也会被加载</li>
<li>使用类的静态成员时(静态属性、静态方法)</li>
</ul>
</li>
<li><p><strong>创建对象时，一个类的调用顺序</strong></p>
</li>
</ol>
<ul>
<li>调用静态代码块和静态属性初始化(优先级相同，顺序执行)</li>
<li>调用普通代码块和普通属性初始化(优先级相同，顺序执行)</li>
<li>调用构造方法</li>
</ul>
<ol start="5">
<li><p>构造器前面隐藏了super()和调用普通代码块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public A()&#123;//构造器</span><br><span class="line">    //1.super()</span><br><span class="line">    //2.调用普通代码块</span><br><span class="line">    //最后执行构造器中代码</span><br><span class="line">    代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>单例设计模式</p>
</li>
</ol>
<ul>
<li><p>单例：某个类只能存在一个对象实例，该类只提供一个取得其对象实例的方法。</p>
</li>
<li><p>两种方式1) 饿汉式 2） 懒汉式</p>
</li>
<li><p>如何保障我们只能创建一个 GirlFriend 对象 </p>
</li>
</ul>
<p>步骤[单例模式-饿汉式]</p>
<ol>
<li>将构造器私有化 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private A()&#123;</span><br><span class="line">    构造代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在类的内部直接创建对象(该对象是 static)<br><code>private static A a = new A(“构造内容”);</code></li>
<li>提供一个公共的 static 方法，返回 gf 对象<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static A getInstance()&#123;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>步骤[单例模式-懒汉式]<br>步骤不同在于2）<br>2) 当用户使用getInstance时，才返回创建对象A，再次使用时，返回上次创建的对象(保证了单例)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private A a;//先声明</span><br><span class="line">public static getInstance()&#123;</span><br><span class="line">    if(a == null)&#123;</span><br><span class="line">        return a = new A(); </span><br><span class="line">    &#125;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>final</li>
</ol>
<ul>
<li>修饰类 类不希望被继承</li>
<li>修饰方法 不希望被子类重写｜改写</li>
<li>修饰变量 变为常量（赋值，不可被修改）</li>
</ul>
<ol start="8">
<li>接口interface</li>
</ol>
<ul>
<li>接口中的属性，只能是final的，而且是public static final修饰符。 </li>
<li>访问接口中的属性： 接口名.属性名 </li>
</ul>
<h4 id="接口VS继承"><a href="#接口VS继承" class="headerlink" title="接口VS继承"></a>接口VS继承</h4><p>小结: 当子类继承了父类，就自动的拥有父类的功能<br>如果子类需要扩展功能，可以通过实现接口的方式扩展.<br>可以理解 实现接口 是对 java 单继承机制的一种补充.</p>
<ol start="9">
<li>内部类<br>定义类在局部位置(方法中/代码块) :(1) 局部内部类<br>(2) 匿名内部类</li>
</ol>
<p>定义在成员位置 (1) 成员内部类 (2)静态内部类</p>
<ul>
<li>局部内部类的使用<img src="/2022/03/17/3-16%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/localinner01.png" class title="localinner01">
<img src="/2022/03/17/3-16%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/localinner02.png" class title="localinner02"></li>
</ul>
<ul>
<li>匿名内部类<img src="/2022/03/17/3-16%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/Annoy01.png" class title="Annoy">
<img src="/2022/03/17/3-16%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/Annoy02.png" class title="Annoy02">
<img src="/2022/03/17/3-16%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/Annoy03.png" class title="Annoy03">
<img src="/2022/03/17/3-16%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/Annoy04.png" class title="Annoy04"></li>
</ul>
<ul>
<li>成员内部类</li>
</ul>
<ol>
<li>定义在外部类的成员位置， 没有static修饰</li>
<li>可以直接访问外部类的成员，包含私有的</li>
<li>可以添加任意的访问修饰符(public protected default private)因为本来就是一个成员</li>
<li>外部类访问， 先创建对象，再访问</li>
<li>外部类、内部类重名，就近原则，访问外部类(外部类名.this.成员)</li>
<li>使用成员内部类的三种方式<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一种方式 outer08.new Inner08(); 相当于把 new Inner08()当做是 outer08 成员  |  这就是一个语法，不要特别的纠结.</span><br><span class="line">2. Outer08.Inner08 inner08 = outer08.new Inner08(); inner08.say(); </span><br><span class="line">第二方式 在外部类中，编写一个方法，可以返回 Inner08 对象 </span><br><span class="line"></span><br><span class="line">Outer08.Inner08 inner08Instance = outer08.getInner08Instance(); inner08Instance.say();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>外部静态类</li>
</ul>
<ol>
<li>可以直接访问外部类的所有静态成员，包含私有的，但是不能访问非静态成员。</li>
<li>可以添加访问修饰符、</li>
<li>其他属性与成员内部类相似</li>
</ol>
<ul>
<li>枚举 enum</li>
</ul>
<ol>
<li>构造方式 （1） 构造器私有化，直接实例话特定对象</li>
<li>enum关键字实现<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//如果使用了 enum 来实现枚举类 </span><br><span class="line">//1. 使用关键字 enum 替代 class </span><br><span class="line">//2. public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;) 直接使用 </span><br><span class="line">// SPRING(&quot;春天&quot;, &quot;温暖&quot;) 解读 常量名(实参列表) </span><br><span class="line">//3. 如果有多个常量(对象)， 使用 ,号间隔即可 //4. 如果使用 enum 来实现枚举，要求将定义常量对象，写在前面 </span><br><span class="line">//5. 如果我们使用的是无参构造器，创建常量对象，则可以省略 ()</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>注解<br>三个基本Annotation: </li>
</ul>
<ol>
<li>@Override: 限定某个方法，是重写父类方法, 该注解只能用于方法</li>
<li> @Deprecated: 用于表示某个程序元素(类, 方法等)已过时<br>@SuppressWarnings: 抑制编译器警告</li>
</ol>
<ul>
<li>元注解（注解的注解</li>
</ul>
<ol>
<li>Retention //指定注解的作用范围，三种 SOURCE,CLASS,RUNTIME </li>
<li> Target // 指定注解可以在哪些地方使用</li>
<li>  Documented //指定该注解是否会在 javadoc 体现</li>
<li>  Inherited //子类会继承父类注解</li>
</ol>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode0317</title>
    <url>/2022/03/19/LeetCode0317/</url>
    <content><![CDATA[<h3 id="算法积累"><a href="#算法积累" class="headerlink" title="算法积累"></a>算法积累</h3><h5 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h5><p>3.16</p>
<ul>
<li>打家劫舍</li>
</ul>
<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p>
<p>解题思路：动态划分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int first = nums[0], second = Math.max(nums[1],nums[0]);</span><br><span class="line"></span><br><span class="line">        for(int i=2; i&lt;nums.length; i++)&#123;//计划遍历，动态选择最大的到second保存</span><br><span class="line">            int tmp = second;</span><br><span class="line">            second = Math.max(first+nums[i], second);</span><br><span class="line">            first = tmp;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return second;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>打乱数组</li>
</ul>
<p>打乱数组中积累的 <em>乱序方法：抽牌法</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//返回数组随机打乱后的结</span><br><span class="line">    public int[] shuffle() &#123;</span><br><span class="line">        int[] array = num.clone();</span><br><span class="line">        for(int i=0; i&lt;num.length; i++)&#123;</span><br><span class="line">            swap(array, i, i+random.nextInt(num.length-i));</span><br><span class="line">        &#125;</span><br><span class="line">        return array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //交换数组元素</span><br><span class="line">    public void swap(int[] nums, int n1, int n2)&#123;</span><br><span class="line">        int tmp= nums[n1];</span><br><span class="line">        nums[n1] = nums[n2];</span><br><span class="line">        nums[n2] = tmp; </span><br></pre></td></tr></table></figure>
<hr>
<p>3.17</p>
<ul>
<li>最小栈            构造方法：借用一个辅助栈Stack， 将最小的树Math.min(minStack.peek(),Val) 重复的存入minStack中。</li>
</ul>
<hr>
<ul>
<li>Fizz Buzz</li>
</ul>
<p>给你一个整数 n ，找出从 1 到 n 各个整数的 Fizz Buzz 表示，并用字符串数组 answer（下标从 1 开始）返回结果，其中：</p>
<pre><code>answer[i] == &quot;FizzBuzz&quot; 如果 i 同时是 3 和 5 的倍数。
answer[i] == &quot;Fizz&quot; 如果 i 是 3 的倍数。
answer[i] == &quot;Buzz&quot; 如果 i 是 5 的倍数。
answer[i] == i （以字符串形式）如果上述条件全不满足。
</code></pre>
<p>解题思路：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(i:n)&#123;</span><br><span class="line">    StringBuffer sb = new StringBuffer()</span><br><span class="line">    if(i%3 | i%5 |)</span><br><span class="line">    sb.append（&quot;对于每一个sb进行拼接&quot;）;</span><br><span class="line">&#125;</span><br><span class="line">return.add(sb);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法积累</category>
      </categories>
      <tags>
        <tag>算法积累</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode0319</title>
    <url>/2022/03/19/LeetCode0319/</url>
    <content><![CDATA[<h3 id="算法积累"><a href="#算法积累" class="headerlink" title="算法积累"></a>算法积累</h3><h5 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h5><p>3.18 </p>
<ul>
<li>计算质数</li>
</ul>
<p><em>给定整数 n ，返回 所有小于非负整数 n 的质数的数量</em></p>
<p>解法A： 只需要枚举到Math.sqrt(n)[2,\sqrt{x}]<br>计算结果：  //超时</p>
<p>解法 B:埃氏筛 </p>
<p>对于每遍历到一个质数 对于这个质数的倍数全部排除掉 计算到Math.sqrt(n)就行，最后在一次遍历统计 质数 数目即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int countPrimes(int n) &#123;</span><br><span class="line">        boolean[] isPrime = new boolean[n];</span><br><span class="line">        //先遍历全部为true</span><br><span class="line">        Arrays.fill(isPrime, true);</span><br><span class="line">        //从2开始遍历</span><br><span class="line">        for (int i = 2; i &lt; Math.sqrt(n); i++) &#123;</span><br><span class="line">            if(isPrime[i])&#123; //开始遍历 将2的倍数全设置为false</span><br><span class="line">                for(int j=i*i; j&lt;n; j+=i)&#123;</span><br><span class="line">                    isPrime[j]=false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int count =0;</span><br><span class="line">        for (int i = 2; i &lt; n; i++) &#123;</span><br><span class="line">            if(isPrime[i])&#123;</span><br><span class="line">                ++count;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<hr>
<ul>
<li>3的幂</li>
</ul>
<p>给定一个整数，写一个函数来判断它是否是 3 的幂次方。如果是，返回 true ；否则，返回 false 。</p>
<p>解题思路 ： 当不为3的倍数时 始终 /= 3 最后 判读是否 结果 == 1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isPowerOfThree(int n) &#123;</span><br><span class="line">        while(n != 0 &amp;&amp; n%3==0)&#123;</span><br><span class="line">            n /=3;</span><br><span class="line">        &#125;</span><br><span class="line">        return n == 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<ul>
<li>罗马数字转换</li>
</ul>
<p>将 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M 转换为对应的 数值<br>其中对于<em>I X C</em>放在 比其代表数值大的罗马数字前  表示对于大数值的减法 </p>
<hr>
<p>3.19 </p>
<ul>
<li>位1的个数</li>
</ul>
<p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p>
<p>解题思路：<br>使用位运算 逻辑右移 忽略符号位 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int hammingWeight(int n) &#123;</span><br><span class="line">       int count = 0;</span><br><span class="line">       for (int i = 0; i &lt; 32; i++) &#123;</span><br><span class="line">           count += n&amp;1;</span><br><span class="line">           n = n &gt;&gt;&gt; 1; //将n无符号向后移动1位</span><br><span class="line">       &#125;</span><br><span class="line">       return count;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>解法二：</p>
<p>调用Java API </p>
<p><code>return Integer.bitCount();</code></p>
<hr>
<ul>
<li>汉明距离 Integer.bitCount()</li>
</ul>
<p>两个整数之间的 汉明距离 指的是这两个数字对应二进制位不同的位置的数目。</p>
<p>解题思路：<br>两个数取 ^ 再对结果进行 1 的统计</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int hammingDistance(int x, int y) &#123;</span><br><span class="line">        int verse = x ^ y;</span><br><span class="line">        //位1的统计</span><br><span class="line">        int count = 0;</span><br><span class="line">        for (int i = 0; i &lt; 32; i++) &#123;</span><br><span class="line">            count += ((verse &amp; 1) == 1) ? 1 : 0;</span><br><span class="line">            verse = verse &gt;&gt;&gt; 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>颠倒二进制位</li>
</ul>
<p>解题思路 直接调用Java API<br><code>return Integer.reverse(n) //其中API也是调用了分治的思想 对于指定数进行颠倒</code></p>
]]></content>
      <categories>
        <category>算法积累</category>
      </categories>
      <tags>
        <tag>算法积累</tag>
      </tags>
  </entry>
  <entry>
    <title>3.18近期总结</title>
    <url>/2022/03/19/3-18%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="近期总结"><a href="#近期总结" class="headerlink" title="近期总结"></a>近期总结</h3><h4 id="异常-Exception"><a href="#异常-Exception" class="headerlink" title="异常 Exception"></a>异常 Exception</h4><hr>
<p>3.17</p>
<ul>
<li><p>Mac OS IDEA 快捷键 <em>ctrl+option+t</em><br><code>Surround With 插入ifelse、try-catch-final</code></p>
</li>
<li><p>执行过程中所发生的异常事件可以分为两类：</p>
</li>
</ul>
<ol>
<li>Error(错误)java虚拟机无法解决的错误。StackOverFlow[栈溢出]、OOM(OutOfMemory);程序会崩溃</li>
<li>Exception: 因为编程错误或者偶然的外在因素导致的一般性问题。可以使用针对性的代码进行处理。</li>
</ol>
<ul>
<li>Exception分类：运行时异常 RuntimeException</li>
<li>编译时间异常</li>
</ul>
<h4 id="异常体系图"><a href="#异常体系图" class="headerlink" title="异常体系图"></a>异常体系图</h4><img src="/2022/03/19/3-18%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/exception00.png" class title="exception00">

<h4 id="常见的编译异常"><a href="#常见的编译异常" class="headerlink" title="常见的编译异常"></a>常见的编译异常</h4><img src="/2022/03/19/3-18%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/bianyi.png" class title="bianyi">

<ul>
<li>处理异常的方法 （2选1）</li>
</ul>
<p>1） try-catch-finally</p>
<ol>
<li> throws 异常抛出，递交给调用者，最终JVM</li>
</ol>
<ul>
<li>自定义异常<br><code>class a extends Exception(RuntimeException)</code></li>
</ul>
<ol>
<li>继承Exception属于编译异常</li>
<li>继承RuntimeExcepition属于运行异常，（一般继承RuntimeExcepition，不必编写时处理）</li>
</ol>
<hr>
<p>3.18</p>
<ul>
<li>String｜StringBUffer｜StrigBuilder</li>
</ul>
<ol>
<li>String: 不可变字符序列，效率低，但是服用率高</li>
<li>StringBuffer： 可变字符序列，效率较高，线程安全</li>
<li>StringBuilder：可变字符序列，效率最高，线程不安全</li>
</ol>
<ul>
<li>Java时间</li>
</ul>
<p>1） 一代时期类 Date + SimpleDateFormat </p>
<ol start="2">
<li><p>二代时期类 Calendar<br><code>Calendar c = Calender.getInstance()</code><br>获取字段<br><code>c.get(Calendar.YEAR|MONTH|HOUR)</code></p>
</li>
<li><p>三代日期类<br>LocalDate| LocalTime| LocalDateTime</p>
</li>
</ol>
<p>获取时间<br><code>LocalDateTime ldf = LocalDateTime.now()</code></p>
<p>格式化+ <code>dateTimeFormatter</code></p>
<hr>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Collection总结</title>
    <url>/2022/03/21/Collection%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><ul>
<li>Java集合的框架两类</li>
</ul>
<p>1） Collection</p>
<img src="/2022/03/21/Collection%E6%80%BB%E7%BB%93/Collection.png" class title="Collection">

<p>2） Map</p>
<img src="/2022/03/21/Collection%E6%80%BB%E7%BB%93/Map.png" class title="Map">


<ul>
<li>快速生成快捷键<br><code>ctrl+j</code> 显示生成所有快捷键的快捷键</li>
</ul>
<ul>
<li>List <em>有序、可重复、可索引</em></li>
</ul>
<ol>
<li>List集合类中元素有序， 可重复</li>
<li>List元素每个元素对应顺序索引，支持索引</li>
<li>List容器中的元素都对应一个序号记载在容器中的位置，可根据序号存取容器中的元素</li>
</ol>
<ul>
<li>ArrayList</li>
</ul>
<ol>
<li>ArrayList维护了一个Object类型数组elementData<br><code>transient Object[] elementData</code></li>
<li>当创建Arraylist对象时，如使用无参构造器，初始elementData容量为0，第一次扩容为10，再次扩容为elementData为1.5倍</li>
<li>如果是调用指定大小构造器，之后扩容指定大小的elementData的1.5倍</li>
</ol>
<ul>
<li>ArrayList比较Vector</li>
</ul>
<ul>
<li>LinkedList(双向链表)</li>
</ul>
<hr>
<ul>
<li>Set接口</li>
</ul>
<p>特性： 无序、无索引、无重复、至多一个null</p>
<p>不能适应索引的方式获取元素</p>
<ul>
<li>HashSet</li>
</ul>
<ol>
<li>HashSet实现set接口</li>
<li>HashSet实际是HashMap<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public HashSet()&#123;</span><br><span class="line">    map = new HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>可以存放，但只能有一个null</li>
<li>HashSet不能保证元素是有序的。取决于Hash之后，再决定索引结果</li>
<li>不存放重复元素/对象</li>
</ol>
<ul>
<li>HashSet 添加元素底层实现</li>
</ul>
<ol>
<li>HashSet底层是HashMap</li>
<li>添加一个元素时，先得到Hash值，转成索引值</li>
<li>找到存储数据表table，看索引位置是否已经有元素</li>
<li>如果没有，直接加入</li>
<li>如果有，就调用key.equals()<strong>(可以重写key的equals()方法进行客制方法)</strong>,如果不同，则添加到最后</li>
<li>Java8中，如果链表的元素个数达到TREEIFY_THRESHHOLD（默认是8),并在table大小 &gt;= MIN_TREEIFY_CAPACITY(默认64)，会进化成红黑树(树化)</li>
</ol>
<ul>
<li>执行 add() public <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">boolean add(E e) &#123;//e = &quot;java&quot; return map.put(e, PRESENT)==null;//(static) PRESENT = new Object(); &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><em>其中PRESENT是Set类中设置的static空值，类比于Map中的K-V</em></p>
<ul>
<li>其中当”size“大于ThreshHold是 数组扩容，size指代的是 加入节点总共的大小，不知占table大小。</li>
</ul>
<ul>
<li>LinkedHashSet</li>
</ul>
<p>LinkedHashSet是HashSet子类</p>
<p>底层是一个LinkedHashMap，底层维护了一个<em>数组+双向链表（可以决定维护元素的次序</em>）</p>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
  <entry>
    <title>3.22近期总结</title>
    <url>/2022/03/23/3-22%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h4><ul>
<li>JDK8中Map接口特点</li>
</ul>
<ol>
<li>Map与Collection并列存在，用于保存具有映射关系的数据:Key-Value</li>
<li>Map中的K-V可以是任何<em>引用类型</em>的数据，封装到HashMap对象中<em>HashMap$Node</em></li>
<li>Key不允许重复</li>
<li>Value可以重复</li>
<li>Key有且仅有一个为null，Value可以有多个null</li>
<li> Key—Value之间单向一一对应</li>
</ol>
<ul>
<li>Map遍历方法</li>
</ul>
<ol>
<li>containsKey查看是否村子啊key</li>
<li>KeySet获取所有的Key</li>
<li>entrySet获取所有关系的K-V</li>
<li>values获取所有的value</li>
</ol>
<p>遍历方法：</p>
<ol>
<li>通过value获取有所有的value</li>
<li>通过keySet获取key Set，然后keyset.for遍历 通过get()获取值</li>
<li>通过entrySet遍历得到所有的键值对entry 然后转型 <code>(Map.entry) entry = (Map.entry)object</code> 转换为entry类型<br>在通过entry提供的<code>getkey()|getvalue()</code>获取</li>
</ol>
<ul>
<li>HashTable </li>
</ul>
<ol>
<li>存放K-V</li>
<li>HashTable的K-V都不能为null，否则会抛出NullPointerEception</li>
<li>HashTable是线程安全的(Synchronized)，HashMap是线程不安全的</li>
</ol>
<ul>
<li>Properties</li>
</ul>
<ol>
<li>Properties继承自 – &gt;HashTable </li>
<li>Properties用于从xxx.properties文件中，记载数据到Properites然后进行读取和修改</li>
<li>xxx.properties文件通常为配置文件</li>
</ol>
<ul>
<li>TreeSet｜TreeMap<br>TreeSet底层就死活TreeMap</li>
</ul>
<ol>
<li>使用TreeSet提供的一个构造器，可以传入一个比较器(匿名内部类)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">publicTreeMap(Comparator&lt;?superK&gt;comparator)&#123;</span><br><span class="line">    this.comparator=comparator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>Collections工具类<br>提供方法（static)</li>
</ul>
<ol>
<li>reverse(List)翻转</li>
<li>shuffle(List)list中元素进行随机排序</li>
<li>sort(list,(Comparator))根据自然(所指定的顺序)对list集合进行排序</li>
<li>swap(List, int, int)将list中的i和j处元素进行交换</li>
<li>max|min(new Comparator)</li>
<li>frequency（collection,Object)</li>
</ol>
<hr>
<ul>
<li>泛型 Generic<br>1） 自定义泛型类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class 类名&lt;T,R...&gt;&#123;</span><br><span class="line">    成员</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>使用泛型数组，不能初始化</li>
<li>静态方法中不能使用类的泛型</li>
<li>泛型类的类型，是在创建对象的时候确定的</li>
</ol>
<p>2） 自定义泛型接口<br><code>interface 接口名&lt;T,R...&gt;&#123;&#125;</code></p>
<ol>
<li>接口中 静态成员(接口中的成员皆为常量)不能使用泛型</li>
<li>接口的类型，在继承接口或者实现接口时确定</li>
</ol>
<p>3） 自定义泛型方法<br><code>修饰符&lt;T,R&gt;返回类型 方法名(参数)&#123;&#125;</code></p>
<p>public void eat(E e){}是<em>使用了泛型，是不泛型方法</em></p>
<ul>
<li><p>泛型的继承和通配符<br>1） &lt;?&gt;支持任意泛型类型<br>2） &lt;? extends A&gt;直接A以及A的子类，规定了泛型的上限<br>3） &lt;? super A &gt;支持A以及A的父类，不限于父类，规定了泛型的下限</p>
</li>
<li><p>JUnit<br>测试单元代码前添加<code>@Test</code>导入Junit包</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java初级学习</category>
      </categories>
      <tags>
        <tag>Java初级学习</tag>
      </tags>
  </entry>
</search>
